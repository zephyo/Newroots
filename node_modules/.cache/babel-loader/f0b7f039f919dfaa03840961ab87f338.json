{"ast":null,"code":"import _classCallCheck from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Angela He/treehacks/src/components/Feed/Post.js\";\nimport React from 'react';\nimport Avatar from '../Misc/Avatar';\nimport CommentBox from './CommentBox';\nimport CommentBut from './CommentBut';\nimport Comments from './Comments';\nimport EditButton from './EditButton';\nimport StaticUserData from '../../data/StaticUserData';\nimport StaticDataModel from '../../data/StaticDataModel';\n/*\n  props:\n-PpfURL\n-yourPpfURL\n-firebase\n-postid\n-uid\n-postClass\n-actionStr\n-name\n-timestamp\n-content\n-setEdit\n*/\n\nvar Post =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Post, _React$Component);\n\n  function Post(props) {\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Post).call(this, props));\n\n    _this.loadedComments = function () {\n      return _this.state.conversation.length !== 0;\n    };\n\n    _this.loadComments = function () {\n      if (!_this.loadedComments()) {\n        //load comments\n        var tempConvo = []; //get once snapshot\n\n        _this.props.firebase.postConversation(_this.props.postid).get().then(function (querySnapshot) {\n          querySnapshot.forEach(function (doc) {\n            tempConvo.push(StaticDataModel.getConvoObject(doc.data(), _this.props.uid));\n          }); //at end, set state of conversation and showconversation\n\n          tempConvo.sort(StaticUserData.compareConvo);\n\n          _this.setState(StaticDataModel.getPostObject(tempConvo, tempConvo.length, !_this.state.showComments));\n        });\n      } else {\n        _this.setState({\n          showComments: !_this.state.showComments\n        });\n      }\n    };\n\n    _this.editPost = function () {\n      _this.props.setEdit();\n    };\n\n    _this.deletePost = function () {\n      /*\n        delete post thread in posts\n        go to everyone in the poster's network and delete the post\n      */\n    };\n\n    _this.mutePoster = function () {\n      /* \n        add poster's uid to your blocked list\n      */\n    };\n\n    _this.reportPost = function () {\n      /* \n        send the contents and postid of the post to our customer service email\n      */\n    };\n\n    _this.getEditOptions = function () {\n      //is own post\n      if (_this.props.posterUid == _this.props.uid) {\n        var options = [{\n          text: 'Delete',\n          onClick: _this.deletePost,\n          class: 'red'\n        }];\n\n        if (_this.props.setEdit != null) {\n          options.push({\n            text: 'Edit',\n            onClick: _this.editPost,\n            class: 'green'\n          });\n        }\n\n        return options;\n      } //not own post\n      else {\n          return [{\n            text: 'Mute',\n            onClick: _this.mutePoster,\n            class: 'grey'\n          }, {\n            text: 'Report',\n            onClick: _this.reportPost,\n            class: 'grey'\n          }];\n        }\n    };\n\n    _this.state = StaticDataModel.getPostObject([], 0, false);\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.firebase.postConversation(this.props.postid).onSnapshot(function (snapshot) {\n        var tempConvo = _this2.state.conversation;\n\n        if (_this2.loadedComments()) {\n          snapshot.docChanges().forEach(function (change) {\n            if (change.type === \"added\") {\n              tempConvo.push(StaticDataModel.getConvoObject(change.doc.data(), _this2.props.uid));\n            }\n          });\n        }\n\n        _this2.setState({\n          conversation: tempConvo,\n          conversationLength: snapshot.size\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: this.props.postClass + \" activity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        PpfURL: this.props.PpfURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"name-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, this.props.name), React.createElement(\"span\", {\n        className: \"sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, ' ' + this.props.actionStr)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.props.timestamp))), React.createElement(EditButton, {\n        modalOptions: this.getEditOptions(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })), this.props.content, React.createElement(CommentBut, {\n        loadComments: this.loadComments,\n        commentLength: this.state.conversationLength,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        showComments: this.state.showComments,\n        conversation: this.state.conversation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(CommentBox, {\n        showComments: this.state.showComments,\n        uid: this.props.uid,\n        PpfURL: this.props.yourPpfURL,\n        poster: this.props.name,\n        firebase: this.props.firebase,\n        postid: this.props.postid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Post;\n}(React.Component);\n\n;\nexport default Post;","map":{"version":3,"sources":["/Volumes/Angela He/treehacks/src/components/Feed/Post.js"],"names":["React","Avatar","CommentBox","CommentBut","Comments","EditButton","StaticUserData","StaticDataModel","Post","props","loadedComments","state","conversation","length","loadComments","tempConvo","firebase","postConversation","postid","get","then","querySnapshot","forEach","doc","push","getConvoObject","data","uid","sort","compareConvo","setState","getPostObject","showComments","editPost","setEdit","deletePost","mutePoster","reportPost","getEditOptions","posterUid","options","text","onClick","class","onSnapshot","snapshot","docChanges","change","type","conversationLength","size","postClass","PpfURL","name","actionStr","timestamp","content","yourPpfURL","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Avatar from '../Misc/Avatar';\nimport CommentBox from './CommentBox';\nimport CommentBut from './CommentBut';\nimport Comments from './Comments';\nimport EditButton from './EditButton';\nimport StaticUserData from '../../data/StaticUserData';\nimport StaticDataModel from '../../data/StaticDataModel';\n\n/*\n  props:\n-PpfURL\n-yourPpfURL\n-firebase\n-postid\n-uid\n-postClass\n-actionStr\n-name\n-timestamp\n-content\n-setEdit\n*/\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = StaticDataModel.getPostObject([], 0, false);\n  }\n\n  componentDidMount() {\n    this.props.firebase.postConversation(this.props.postid).onSnapshot((snapshot) => {\n\n      let tempConvo = this.state.conversation;\n\n      if (this.loadedComments()) {\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            tempConvo.push(StaticDataModel.getConvoObject(change.doc.data(), this.props.uid))\n          }\n        });\n      }\n      this.setState({\n        conversation: tempConvo,\n        conversationLength: snapshot.size\n      });\n    });\n  }\n\n  loadedComments = () => {\n    return this.state.conversation.length !== 0;\n  }\n\n  loadComments = () => {\n    if (!this.loadedComments()) {\n      //load comments\n      let tempConvo = [];\n      //get once snapshot\n      this.props.firebase.postConversation(this.props.postid).get().then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          tempConvo.push(StaticDataModel.getConvoObject(doc.data(), this.props.uid))\n        });\n\n        //at end, set state of conversation and showconversation\n        tempConvo.sort(StaticUserData.compareConvo);\n\n        this.setState(StaticDataModel.getPostObject(\n          tempConvo,\n          tempConvo.length,\n          !this.state.showComments));\n      });\n\n    } else {\n      this.setState({ showComments: !this.state.showComments })\n    }\n  }\n\n  editPost = () => {\n    this.props.setEdit();\n  }\n\n  deletePost = () => {\n    /*\n      delete post thread in posts\n      go to everyone in the poster's network and delete the post\n    */\n\n  }\n\n  mutePoster = () => {\n    /* \n      add poster's uid to your blocked list\n    */\n  }\n\n  reportPost = () => {\n    /* \n      send the contents and postid of the post to our customer service email\n    */\n  }\n\n  getEditOptions = () => {\n    //is own post\n    if (this.props.posterUid == this.props.uid) {\n      let options = [\n        {\n          text: 'Delete',\n          onClick: this.deletePost,\n          class: 'red'\n        }\n      ];\n      if (this.props.setEdit != null) {\n        options.push({\n          text: 'Edit',\n          onClick: this.editPost,\n          class: 'green'\n        });\n      }\n      return options;\n    }\n    //not own post\n    else {\n      return [\n        {\n          text: 'Mute',\n          onClick: this.mutePoster,\n          class: 'grey'\n        },\n        {\n          text: 'Report',\n          onClick: this.reportPost,\n          class: 'grey'\n        }\n      ];\n    }\n  }\n\n  render() {\n    return (\n      <div className={this.props.postClass + \" activity\"}>\n\n        <div className=\"header\">\n          <Avatar PpfURL={this.props.PpfURL} />\n          <div className=\"name-date\">\n            <div><span className=\"name\">{this.props.name}</span>\n              <span className=\"sub\">{' ' + this.props.actionStr}</span></div>\n            <div><span className=\"date\">{this.props.timestamp}</span></div>\n          </div>\n          <EditButton\n            modalOptions={this.getEditOptions()}\n          />\n        </div>\n\n        {this.props.content}\n\n        <CommentBut\n          loadComments={this.loadComments}\n          commentLength={this.state.conversationLength}\n        />\n        <Comments\n          showComments={this.state.showComments}\n          conversation={this.state.conversation}\n        />\n        <CommentBox\n          showComments={this.state.showComments}\n          uid={this.props.uid}\n          PpfURL={this.props.yourPpfURL}\n          poster={this.props.name}\n          firebase={this.props.firebase}\n          postid={this.props.postid}\n        />\n      </div>\n    );\n  }\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}