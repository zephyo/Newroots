{"ast":null,"code":"import _classCallCheck from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport * as firebase from 'firebase';\nvar config = {\n  apiKey: \"AIzaSyAE-aLJJ6ihwSxicksB67Yeg_84vE4J_wM\",\n  authDomain: \"treehacks2019.firebaseapp.com\",\n  databaseURL: \"https://treehacks2019.firebaseio.com\",\n  projectId: \"treehacks2019\",\n  storageBucket: \"treehacks2019.appspot.com\",\n  messagingSenderId: \"50059105382\"\n};\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doDelete = function (callback, errorCallback) {\n    _this.auth.currentUser.delete().then(callback).catch(errorCallback);\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doPasswordUpdate = function (password, callback, failCallback) {\n    return _this.auth.currentUser.updatePassword(password).then(callback).catch(failCallback);\n  };\n\n  this.doEmailUpdate = function (email, callback, failCallback) {\n    return _this.auth.currentUser.updateEmail(email).then(callback).catch(failCallback);\n  };\n\n  this.reAuth = function (password, successCallback, failCallback) {\n    var user = _this.auth.currentUser;\n\n    var credential = _this.auth.EmailAuthProvider.credential(user.email, password);\n\n    user.reauthenticateAndRetrieveDataWithCredential(credential).then(function () {\n      return successCallback(user);\n    }).catch(failCallback);\n  };\n\n  this.arrayUnion = function (args) {\n    return firebase.firestore.FieldValue.arrayUnion(args);\n  };\n\n  this.arrayRemove = function (args) {\n    return firebase.firestore.FieldValue.arrayRemove(args);\n  };\n\n  this.auth = function () {\n    return _this.fs.auth();\n  };\n\n  this.user = function (uid) {\n    return _this.fs.collection('users').doc(uid);\n  };\n\n  this.users = function () {\n    return _this.fs.collection('users');\n  };\n\n  this.posts = function () {\n    return _this.fs.collection('posts');\n  };\n\n  this.feed = function (uid) {\n    return _this.fs.collection(\"users\").doc(uid).collection('feed');\n  };\n\n  this.muteList = function (uid) {\n    return _this.fs.collection(\"users\").doc(uid).collection('muteList');\n  };\n\n  this.network = function (uid) {\n    return _this.fs.collection(\"users\").doc(uid).collection('network');\n  };\n\n  this.requests = function (uid) {\n    return _this.fs.collection(\"users\").doc(uid).collection('requests');\n  };\n\n  this.post = function (postid) {\n    return _this.fs.collection('posts').doc(postid);\n  };\n\n  this.postConversation = function (postid) {\n    return _this.fs.collection('posts').doc(postid).collection(\"conversation\");\n  };\n\n  this.posts = function () {\n    return _this.fs.collection('posts');\n  };\n\n  this.fs = function () {\n    return _this.fs;\n  };\n\n  this.photos = function (uid) {\n    return _this.store.ref(uid);\n  };\n\n  this.checkIfMuted = function (uid, theirUid, mutedCallback) {\n    _this.muteList(uid).doc(theirUid).get().then(function (doc) {\n      if (doc.exists) {\n        mutedCallback();\n      }\n    });\n  };\n\n  this.mutePoster = function (uid, mutedUid) {\n    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _this.muteList(uid).doc(mutedUid).set({\n      exists: true\n    }).then(callback);\n  };\n\n  this.unmutePoster = function (uid, unmuteUid) {\n    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _this.muteList(uid).doc(unmuteUid).delete().then(callback);\n  };\n\n  this.reportPoster = function (uid, posterUid) {};\n\n  this.reportPost = function (uid, postid) {};\n\n  this.addToNetwork = function (myUid, theirUid) {\n    _this.network(myUid).doc(theirUid).set({\n      exists: true\n    }).then(function () {});\n\n    _this.network(theirUid).doc(myUid).set({\n      exists: true\n    }).then(function () {});\n  };\n\n  this.addToFeed = function (myUid, theirUid) {\n    //update their feed with your posts; update your feed with their posts\n    _this.feed(myUid).where('uid', '==', myUid).get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        _this.feed(theirUid).doc(doc.id).set(doc.data());\n      });\n    });\n\n    _this.feed(theirUid).where('uid', '==', theirUid).get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        _this.feed(myUid).doc(doc.id).set(doc.data());\n      });\n    });\n  };\n\n  app.initializeApp(config);\n  this.auth = app.auth();\n  this.store = app.storage();\n  this.fs = app.firestore();\n} // *** Auth API ***\n;\n\nexport default Firebase;","map":{"version":3,"sources":["/Volumes/Angela He/treehacks/src/components/Firebase/firebase.js"],"names":["app","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doDelete","callback","errorCallback","currentUser","delete","then","catch","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","failCallback","updatePassword","doEmailUpdate","updateEmail","reAuth","successCallback","user","credential","EmailAuthProvider","reauthenticateAndRetrieveDataWithCredential","arrayUnion","args","firestore","FieldValue","arrayRemove","fs","uid","collection","doc","users","posts","feed","muteList","network","requests","post","postid","postConversation","photos","store","ref","checkIfMuted","theirUid","mutedCallback","get","exists","mutePoster","mutedUid","set","unmutePoster","unmuteUid","reportPoster","posterUid","reportPost","addToNetwork","myUid","addToFeed","where","querySnapshot","forEach","id","data","initializeApp","storage"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport * as firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyAE-aLJJ6ihwSxicksB67Yeg_84vE4J_wM\",\n  authDomain: \"treehacks2019.firebaseapp.com\",\n  databaseURL: \"https://treehacks2019.firebaseio.com\",\n  projectId: \"treehacks2019\",\n  storageBucket: \"treehacks2019.appspot.com\",\n  messagingSenderId: \"50059105382\"\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.store = app.storage();\n    this.fs = app.firestore();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignOut = () => this.auth.signOut();\n\n  doDelete = (callback, errorCallback) => {\n    this.auth.currentUser.delete().then(callback).catch(errorCallback);\n  }\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = (password, callback, failCallback) =>\n    this.auth.currentUser.updatePassword(password).then(callback).catch(failCallback);\n\n  doEmailUpdate = (email, callback, failCallback) =>\n    this.auth.currentUser.updateEmail(email).then(callback).catch(failCallback);\n\n  reAuth = (password, successCallback, failCallback) => {\n    const user = this.auth.currentUser;\n    const credential = this.auth.EmailAuthProvider.credential(\n      user.email,\n      password\n    );\n\n    user.reauthenticateAndRetrieveDataWithCredential(credential)\n      .then(() => successCallback(user))\n      .catch(failCallback);\n  }\n\n  // *** FieldValue API ***\n\n  arrayUnion = args => firebase.firestore.FieldValue.arrayUnion(args);\n\n  arrayRemove = args => firebase.firestore.FieldValue.arrayRemove(args);\n\n  // *** User API ***\n\n  auth = () => this.fs.auth();\n\n  user = uid => this.fs.collection('users').doc(uid);\n\n  users = () => this.fs.collection('users');\n\n  posts = () => this.fs.collection('posts');\n\n  feed = uid => this.fs.collection(\"users\").doc(uid).collection('feed');\n\n  muteList = uid => this.fs.collection(\"users\").doc(uid).collection('muteList');\n\n  network = uid => this.fs.collection(\"users\").doc(uid).collection('network');\n\n  requests = uid => this.fs.collection(\"users\").doc(uid).collection('requests');\n\n  post = postid => this.fs.collection('posts').doc(postid);\n\n  postConversation = postid => this.fs.collection('posts').doc(postid).collection(\"conversation\");\n\n  posts = () => this.fs.collection('posts');\n\n  fs = () => this.fs;\n\n  photos = (uid) => this.store.ref(uid);\n\n\n  /* Helper Functions */\n\n  checkIfMuted = (uid, theirUid, mutedCallback) => {\n    this.muteList(uid).doc(theirUid).get()\n      .then((doc) => {\n        if (doc.exists) {\n          mutedCallback();\n        }\n      })\n  }\n\n  mutePoster = (uid, mutedUid, callback = null) => {\n    this.muteList(uid)\n      .doc(mutedUid).set({\n        exists: true\n      })\n      .then(callback);\n  }\n\n  unmutePoster = (uid, unmuteUid, callback = null) => {\n    this.muteList(uid)\n      .doc(unmuteUid).delete().then(callback);\n  }\n\n  reportPoster = (uid, posterUid) => {\n\n  }\n\n  reportPost = (uid, postid) => {\n\n  }\n\n  addToNetwork = (myUid, theirUid) => {\n    this.network(myUid)\n      .doc(theirUid)\n      .set({ exists: true })\n      .then(() => { });\n    this.network(theirUid)\n      .doc(myUid)\n      .set({ exists: true })\n      .then(() => { });\n  }\n\n  addToFeed = (myUid, theirUid) => {\n    //update their feed with your posts; update your feed with their posts\n    this.feed(myUid).where('uid', '==', myUid).get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        this.feed(theirUid).doc(doc.id).set(doc.data());\n      });\n    });\n\n    this.feed(theirUid).where('uid', '==', theirUid).get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        this.feed(myUid).doc(doc.id).set(doc.data());\n      });\n    });\n  }\n\n}\n\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}