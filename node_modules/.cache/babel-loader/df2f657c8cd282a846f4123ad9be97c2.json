{"ast":null,"code":"import _classCallCheck from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gollyzoom/Documents/GitHub/treehacks/src/components/Feed/ThoughtInput.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport moment from 'moment';\n\nvar ThoughtInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ThoughtInput, _React$Component);\n\n  function ThoughtInput(props) {\n    var _this;\n\n    _classCallCheck(this, ThoughtInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThoughtInput).call(this, props));\n\n    _this.onThoughtChange = function (event) {\n      _this.setState({\n        thought: event.target.value\n      });\n    };\n\n    _this.onSubmit = function () {\n      //save to feed of every person in the network\n      var network = _this.props.network;\n      var thought = _this.state.thought;\n      var PpfURL = _this.props.PpfURL === undefined ? null : _this.props.PpfURL;\n      var date = new Date().toString();\n      var data = {\n        PpfURL: PpfURL,\n        name: _this.props.name,\n        uid: _this.props.uid,\n        timestamp: new Date().toString(),\n        realtime: moment(date).format('lll'),\n        thought: thought\n      }; //save to your feed\n\n      _this.props.firebase.feed(_this.props.uid).add(data).then(function (docRef) {\n        var id = docRef.id;\n\n        for (var i = 0; i < network.length; i++) {\n          _this.props.firebase.feed(network[i]).doc(id).set(data);\n        } //save to post\n\n\n        _this.props.firebase.posts().doc(id).set(data).then(function () {\n          _this.setState({\n            thought: null\n          });\n\n          $('#thought-box').val('');\n        });\n      });\n    };\n\n    _this.state = {\n      thought: null\n    };\n    return _this;\n  }\n\n  _createClass(ThoughtInput, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"create-thought\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        rows: \"2\",\n        id: \"thought-box\",\n        placeholder: \"Your thoughts\",\n        onChange: this.onThoughtChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"update\",\n        onClick: this.onSubmit,\n        disabled: this.state.thought == null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Update\"));\n    }\n  }]);\n\n  return ThoughtInput;\n}(React.Component);\n\nexport default ThoughtInput;","map":{"version":3,"sources":["/Users/gollyzoom/Documents/GitHub/treehacks/src/components/Feed/ThoughtInput.js"],"names":["React","Component","$","moment","ThoughtInput","props","onThoughtChange","event","setState","thought","target","value","onSubmit","network","state","PpfURL","undefined","date","Date","toString","data","name","uid","timestamp","realtime","format","firebase","feed","add","then","docRef","id","i","length","doc","set","posts","val"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport moment from 'moment';\n\nclass ThoughtInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thought: null\n    }\n  }\n\n  onThoughtChange = (event) => {\n    this.setState({ thought: event.target.value })\n  }\n\n  onSubmit = () => {\n    //save to feed of every person in the network\n    let network = this.props.network;\n    let thought = this.state.thought;\n    let PpfURL = this.props.PpfURL === undefined ? null : this.props.PpfURL;\n    const date = new Date().toString();\n    let data = {\n      PpfURL: PpfURL,\n      name: this.props.name,\n      uid: this.props.uid,\n      timestamp: new Date().toString(),\n      realtime: moment(date).format('lll'),\n      thought: thought\n    };\n\n\n    //save to your feed\n    this.props.firebase.feed(this.props.uid).add(data).then((docRef) => {\n      let id = docRef.id;\n      for (let i = 0; i < network.length; i++) {\n        this.props.firebase.feed(network[i]).doc(id).set(data);\n      }\n\n      //save to post\n      this.props.firebase.posts().doc(id).set(data).then(() => {\n        this.setState({\n          thought: null\n        });\n        $('#thought-box').val('');\n      });\n\n    });\n\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"create-thought\">\n        <textarea rows=\"2\" id=\"thought-box\" placeholder=\"Your thoughts\" onChange={this.onThoughtChange}></textarea>\n        <button\n          id=\"update\"\n          onClick={this.onSubmit}\n          disabled={this.state.thought == null}>Update</button>\n      </div>\n    );\n  }\n}\n\n\nexport default ThoughtInput;"]},"metadata":{},"sourceType":"module"}