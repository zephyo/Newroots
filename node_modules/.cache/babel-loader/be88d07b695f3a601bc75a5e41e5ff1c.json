{"ast":null,"code":"import _defineProperty from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\nvar feedListen;\n\nvar FeedTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FeedTab, _React$Component);\n\n  function FeedTab(props) {\n    var _this;\n\n    _classCallCheck(this, FeedTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedTab).call(this, props));\n    _this.state = {\n      thoughts: [],\n      checkins: [] //this.processTime = this.processTime.bind(this);\n\n    };\n    return _this;\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n   - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n\n\n  _createClass(FeedTab, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      autosize($('textarea'));\n      var element = this;\n      var tempFeed = [];\n      var tempCheckins = [];\n      var tempThoughts = [];\n      feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach(function (change) {\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            tempFeed.push(change.doc.id);\n\n            if (change.doc.data().checkin) {\n              tempCheckins.push({\n                uid: element.props.uid,\n                name: change.doc.data().author,\n                timestamp: moment().startOf('hour').fromNow(),\n                ismyPost: element.props.uid == change.doc.data().author_uid,\n                checkinData: change.doc.data().checkins\n              });\n            } else {\n              tempThoughts.push({\n                uid: element.props.uid,\n                name: change.doc.data().name,\n                isMyPost: element.props.uid == change.doc.data().author_uid,\n                message: change.doc.data().message,\n                comments: change.doc.data().comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: change.doc.timestamp\n              });\n            }\n          }\n        });\n        console.log(tempCheckins);\n        console.log(tempThoughts);\n        element.setState(function (prevState) {\n          return {\n            checkins: element.state.checkins.concat(tempCheckins),\n            thoughts: element.state.thoughts.concat(tempThoughts)\n          };\n        });\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      feedListen();\n    }\n    /*feed = this.props.feed;\n     for (var i = 0; i< feed.length; i++){\n      \n    }*/\n\n    /*<ThoughtPost /> \n    const listItems = numbers.map((number) =>\n      <li>{number}</li>\n    );\n    */\n    //const checkins = this.state.checkins;\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var checkinItems = this.state.checkins.map(function (checkin, index) {\n        return React.createElement(CheckinPost, {\n          key: toString(index),\n          name: checkin.name,\n          timestamp: checkin.timestamp,\n          ismyPost: checkin.ismyPost,\n          checkinData: checkin.checkinData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      });\n      var thoughtItems = this.state.thoughts.map(function (thought, index) {\n        var _React$createElement;\n\n        return React.createElement(ThoughtPost, (_React$createElement = {\n          key: toString(index),\n          name: thought.name,\n          timestamp: thought.timestamp,\n          ismyPost: thought.ismyPost,\n          message: thought.message,\n          postid: thought.postid,\n          firebase: _this2.props.firebase\n        }, _defineProperty(_React$createElement, \"timestamp\", moment().startOf('hour').fromNow()), _defineProperty(_React$createElement, \"__source\", {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement));\n      });\n      return React.createElement(\"section\", {\n        className: \"feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"create-thought\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        rows: \"2\",\n        placeholder: \"Your thoughts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"update\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"update\")), React.createElement(\"h1\", {\n        className: \"date-marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"February 15\"), checkinItems, thoughtItems, React.createElement(ErrorMsg, {\n        src: graphics1,\n        header: \"Nothing more.\",\n        msg: \"Why not post a thought?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FeedTab;\n}(React.Component);\n\nexport default FeedTab;","map":{"version":3,"sources":["/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js"],"names":["React","Component","$","autosize","CheckinPost","ThoughtPost","moment","graphics1","ErrorMsg","feedListen","FeedTab","props","state","thoughts","checkins","element","tempFeed","tempCheckins","tempThoughts","firebase","user","uid","collection","onSnapshot","snapshot","docChanges","forEach","change","type","push","doc","id","data","checkin","name","author","timestamp","startOf","fromNow","ismyPost","author_uid","checkinData","isMyPost","message","comments","comm_cont","conversation","postid","console","log","setState","prevState","concat","checkinItems","map","index","toString","thoughtItems","thought"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAIC,UAAJ;;IAEMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,QAAQ,EAAE,EAFC,CAIb;;AAJa,KAAb;AAFiB;AAOlB;AACD;;;;;;;;;;;;;;;;;;;;;;wCAmBoB;AAClBX,MAAAA,QAAQ,CAACD,CAAC,CAAC,UAAD,CAAF,CAAR;AACA,UAAIa,OAAO,GAAG,IAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,YAAY,GAAG,EAAnB;AACAT,MAAAA,UAAU,GAAG,KAAKE,KAAL,CAAWQ,QAAX,CAAoBC,IAApB,CAAyB,KAAKT,KAAL,CAAWU,GAApC,EAAyCC,UAAzC,CAAoD,MAApD,EACVC,UADU,CACC,UAAUC,QAAV,EAAoB;AAC9B;AACAA,QAAAA,QAAQ,CAACC,UAAT,GAAsBC,OAAtB,CAA8B,UAAUC,MAAV,EAAkB;AAE9C,cAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B;AACAZ,YAAAA,QAAQ,CAACa,IAAT,CAAcF,MAAM,CAACG,GAAP,CAAWC,EAAzB;;AACA,gBAAIJ,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBC,OAAtB,EAA+B;AAC7BhB,cAAAA,YAAY,CAACY,IAAb,CAAkB;AAChBR,gBAAAA,GAAG,EAAEN,OAAO,CAACJ,KAAR,CAAcU,GADH;AAEhBa,gBAAAA,IAAI,EAAEP,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBG,MAFR;AAGhBC,gBAAAA,SAAS,EAAE9B,MAAM,GAAG+B,OAAT,CAAiB,MAAjB,EAAyBC,OAAzB,EAHK;AAIhBC,gBAAAA,QAAQ,EAAGxB,OAAO,CAACJ,KAAR,CAAcU,GAAd,IAAqBM,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBQ,UAJlC;AAKhBC,gBAAAA,WAAW,EAAEd,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBlB;AALf,eAAlB;AAOD,aARD,MASK;AACHI,cAAAA,YAAY,CAACW,IAAb,CAAkB;AAChBR,gBAAAA,GAAG,EAAEN,OAAO,CAACJ,KAAR,CAAcU,GADH;AAEhBa,gBAAAA,IAAI,EAAEP,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBE,IAFR;AAGhBQ,gBAAAA,QAAQ,EAAG3B,OAAO,CAACJ,KAAR,CAAcU,GAAd,IAAqBM,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBQ,UAHlC;AAIhBG,gBAAAA,OAAO,EAAEhB,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBW,OAJX;AAKhBC,gBAAAA,QAAQ,EAAEjB,MAAM,CAACG,GAAP,CAAWE,IAAX,GAAkBa,SALZ;AAMhBC,gBAAAA,YAAY,EAAE,EANE;AAOhBC,gBAAAA,MAAM,EAACpB,MAAM,CAACG,GAAP,CAAWC,EAPF;AAQdK,gBAAAA,SAAS,EAACT,MAAM,CAACG,GAAP,CAAWM;AARP,eAAlB;AAUD;AACF;AAEF,SA5BD;AA6BAY,QAAAA,OAAO,CAACC,GAAR,CAAYhC,YAAZ;AACA+B,QAAAA,OAAO,CAACC,GAAR,CAAY/B,YAAZ;AACAH,QAAAA,OAAO,CAACmC,QAAR,CAAiB,UAAAC,SAAS;AAAA,iBAAK;AAC3BrC,YAAAA,QAAQ,EAAEC,OAAO,CAACH,KAAR,CAAcE,QAAd,CAAuBsC,MAAvB,CAA8BnC,YAA9B,CADiB;AAE3BJ,YAAAA,QAAQ,EAAEE,OAAO,CAACH,KAAR,CAAcC,QAAd,CAAuBuC,MAAvB,CAA8BlC,YAA9B;AAFiB,WAAL;AAAA,SAA1B;AAIA;;;;AAID,OA1CU,CAAb;AA2CD;;;2CACsB;AACrBT,MAAAA,UAAU;AACX;AAEC;;;;;AAKA;;;;;AAKA;;;;6BACO;AAAA;;AAEP,UAAM4C,YAAY,GAAG,KAAKzC,KAAL,CAAWE,QAAX,CAAoBwC,GAApB,CAAwB,UAACrB,OAAD,EAAUsB,KAAV;AAAA,eAC3C,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEC,QAAQ,CAACD,KAAD,CAA1B;AAAmC,UAAA,IAAI,EAAEtB,OAAO,CAACC,IAAjD;AAAuD,UAAA,SAAS,EAAED,OAAO,CAACG,SAA1E;AAAqF,UAAA,QAAQ,EAAEH,OAAO,CAACM,QAAvG;AAAiH,UAAA,WAAW,EAAEN,OAAO,CAACQ,WAAtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD2C;AAAA,OAAxB,CAArB;AAGA,UAAMgB,YAAY,GAAG,KAAK7C,KAAL,CAAWC,QAAX,CAAoByC,GAApB,CAAwB,UAACI,OAAD,EAAUH,KAAV;AAAA;;AAAA,eAC3C,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEC,QAAQ,CAACD,KAAD,CAA1B;AAAmC,UAAA,IAAI,EAAEG,OAAO,CAACxB,IAAjD;AAAuD,UAAA,SAAS,EAAEwB,OAAO,CAACtB,SAA1E;AAAqF,UAAA,QAAQ,EAAEsB,OAAO,CAACnB,QAAvG;AAAiH,UAAA,OAAO,EAAEmB,OAAO,CAACf,OAAlI;AAA2I,UAAA,MAAM,EAAIe,OAAO,CAACX,MAA7J;AAAqK,UAAA,QAAQ,EAAE,MAAI,CAACpC,KAAL,CAAWQ;AAA1L,8DAA+Mb,MAAM,GAAG+B,OAAT,CAAiB,MAAjB,EAAyBC,OAAzB,EAA/M;AAAA;AAAA;AAAA,yFAD2C;AAAA,OAAxB,CAArB;AAKA,aAEE;AAAS,QAAA,SAAS,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAU,QAAA,IAAI,EAAC,GAAf;AAAmB,QAAA,WAAW,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAQ,QAAA,EAAE,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CADF,EAKE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALF,EAMGe,YANH,EAOGI,YAPH,EAUE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAElD,SADP;AAEE,QAAA,MAAM,EAAC,eAFT;AAGE,QAAA,GAAG,EAAC,yBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVF,CAFF;AAoBD;;;;EA3HmBP,KAAK,CAACC,S;;AA8H5B,eAAeS,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\n\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\n\nlet feedListen;\n\nclass FeedTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n      checkins: []\n    }\n    //this.processTime = this.processTime.bind(this);\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n\n  - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n  componentDidMount() {\n    autosize($('textarea'));\n    let element = this;\n    let tempFeed = [];\n    let tempCheckins = [];\n    let tempThoughts = [];\n    feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\")\n      .onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach(function (change) {\n\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            tempFeed.push(change.doc.id);\n            if (change.doc.data().checkin) {\n              tempCheckins.push({\n                uid: element.props.uid,\n                name: change.doc.data().author,\n                timestamp: moment().startOf('hour').fromNow(),\n                ismyPost: (element.props.uid == change.doc.data().author_uid),\n                checkinData: change.doc.data().checkins\n              })\n            }\n            else {\n              tempThoughts.push({\n                uid: element.props.uid,\n                name: change.doc.data().name,\n                isMyPost: (element.props.uid == change.doc.data().author_uid),\n                message: change.doc.data().message,\n                comments: change.doc.data().comm_cont,\n                conversation: [],\n                postid:change.doc.id,\n                  timestamp:change.doc.timestamp\n              })\n            }\n          }\n\n        });\n        console.log(tempCheckins);\n        console.log(tempThoughts);\n        element.setState(prevState => ({\n            checkins: element.state.checkins.concat(tempCheckins),\n            thoughts: element.state.thoughts.concat(tempThoughts)\n        }))\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n  }\n  componentWillUnmount() {\n    feedListen();\n  }\n\n    /*feed = this.props.feed;\n\n    for (var i = 0; i< feed.length; i++){\n      \n    }*/\n    /*<ThoughtPost /> \n    const listItems = numbers.map((number) =>\n      <li>{number}</li>\n    );\n    */\n    //const checkins = this.state.checkins;\n  render() {\n\n    const checkinItems = this.state.checkins.map((checkin, index) =>\n      <CheckinPost key={toString(index)} name={checkin.name} timestamp={checkin.timestamp} ismyPost={checkin.ismyPost} checkinData={checkin.checkinData} />\n    );\n    const thoughtItems = this.state.thoughts.map((thought, index) =>\n      <ThoughtPost key={toString(index)} name={thought.name} timestamp={thought.timestamp} ismyPost={thought.ismyPost} message={thought.message} postid = {thought.postid} firebase={this.props.firebase} timestamp={moment().startOf('hour').fromNow()} />\n    );\n\n\n    return (\n\n      <section className=\"feed\">\n        <div className=\"create-thought\">\n          <textarea rows=\"2\" placeholder=\"Your thoughts\"></textarea>\n          <button id=\"update\">update</button>\n        </div>\n        <h1 className=\"date-marker\">February 15</h1>\n        {checkinItems}\n        {thoughtItems}\n\n\n        <ErrorMsg\n          src={graphics1}\n          header='Nothing more.'\n          msg='Why not post a thought?'\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default FeedTab;\n"]},"metadata":{},"sourceType":"module"}