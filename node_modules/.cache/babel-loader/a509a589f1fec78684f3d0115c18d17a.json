{"ast":null,"code":"import _classCallCheck from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './ThoughtInput';\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\nvar feedListen;\n\nvar FeedTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FeedTab, _React$Component);\n\n  function FeedTab(props) {\n    var _this;\n\n    _classCallCheck(this, FeedTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedTab).call(this, props));\n\n    _this.compare = function (a, b) {\n      if (a.timestamp < b.timestamp) return -1;\n      if (a.timestamp > b.timestamp) return 1;\n      return 0;\n    };\n\n    _this.state = {\n      thoughts: [],\n      checkins: [] //this.processTime = this.processTime.bind(this);\n\n    };\n    return _this;\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n   - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n\n\n  _createClass(FeedTab, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      autosize($('textarea'));\n      var element = this;\n      var tempFeed = [];\n      var tempCheckins = this.state.checkins;\n      var tempThoughts = this.state.thoughts;\n      feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"timestamp\", \"desc\").onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach(function (change) {\n          console.log(\"changety[e]: \" + change.type);\n\n          if (change.type === \"added\") {\n            console.log(\"New city: \", change.doc.data());\n            tempFeed.push(change.doc.id);\n            var dat = change.doc.data();\n\n            if (change.doc.data().checkin) {\n              tempCheckins.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                timestamp: moment(dat.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: dat.checkinData\n              });\n            } else {\n              tempThoughts.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                thought: dat.thought,\n                message: dat.message,\n                comments: dat.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(dat.timestamp).format('lll')\n              });\n            }\n          }\n        });\n        console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));\n        element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        });\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      feedListen();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var feed = this.state.checkins.concat(this.state.thoughts);\n      feed.sort(this.compare);\n      var feedItems = feed.map(function (f, index) {\n        if (f.checkinData) {\n          return React.createElement(CheckinPost, {\n            uid: _this2.props.uid,\n            posterUid: f.uid,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this2.props.PpfURL,\n            key: toString(index) + \"_checkin\",\n            name: f.name,\n            timestamp: f.timestamp,\n            postid: f.postid,\n            checkinData: f.checkinData,\n            firebase: _this2.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          });\n        } else {\n          return React.createElement(ThoughtPost, {\n            uid: _this2.props.uid,\n            posterUid: f.uid,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this2.props.PpfURL,\n            key: toString(index) + \"_thought\",\n            name: f.name,\n            thought: f.thought,\n            timestamp: f.timestamp,\n            message: f.message,\n            postid: f.postid,\n            firebase: _this2.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          });\n        }\n      }); // let feedItems = this.state.checkins.map((checkin, index) =>\n      //   <CheckinPost\n      //     uid={this.props.uid}\n      //     posterUid={checkin.uid}\n      //     PpfURL={checkin.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={checkin.name}\n      //     timestamp={checkin.timestamp}\n      //     postid={checkin.postid}\n      //     checkinData={checkin.checkinData}\n      //     firebase={this.props.firebase}\n      //   />\n      // );\n      // let thoughtItems = this.state.thoughts.map((thought, index) =>\n      //   <ThoughtPost\n      //     uid={this.props.uid}\n      //     posterUid={thought.uid}\n      //     PpfURL={thought.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={thought.name}\n      //     thought={thought.thought}\n      //     timestamp={thought.timestamp}\n      //     message={thought.message}\n      //     postid={thought.postid}\n      //     firebase={this.props.firebase\n      //     } />\n      // );\n      // console.log(checkinItems);\n      //combine checkinItems and thoughtItems then sort then render\n\n      return React.createElement(\"section\", {\n        className: \"feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(ThoughtInput, {\n        PpfURL: this.props.PpfURL,\n        name: this.props.name,\n        uid: this.props.uid,\n        network: this.props.network,\n        firebase: this.props.firebase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"date-marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"February 17\"), feedItems, React.createElement(ErrorMsg, {\n        src: graphics1,\n        header: \"Nothing more.\",\n        msg: \"Why not post a thought?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FeedTab;\n}(React.Component);\n\nexport default FeedTab;","map":{"version":3,"sources":["/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js"],"names":["React","Component","$","autosize","CheckinPost","ThoughtPost","moment","ThoughtInput","graphics1","ErrorMsg","feedListen","FeedTab","props","compare","a","b","timestamp","state","thoughts","checkins","element","tempFeed","tempCheckins","tempThoughts","firebase","user","uid","collection","orderBy","onSnapshot","snapshot","docChanges","forEach","change","console","log","type","doc","data","push","id","dat","checkin","unshift","name","PpfURL","format","postid","checkinData","thought","message","comments","comm_cont","conversation","JSON","stringify","setState","feed","concat","sort","feedItems","map","f","index","toString","network"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './ThoughtInput';\n\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\n\nlet feedListen;\n\nclass FeedTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n      checkins: [],\n\n    }\n    //this.processTime = this.processTime.bind(this);\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n\n  - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n  componentDidMount() {\n    autosize($('textarea'));\n    let element = this;\n    let tempFeed = [];\n    let tempCheckins = this.state.checkins;\n    let tempThoughts = this.state.thoughts;\n    feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"timestamp\",\"desc\")\n      .onSnapshot((snapshot) => {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach((change) => {\n          console.log(\"changety[e]: \" + change.type);\n          if (change.type === \"added\") {\n            console.log(\"New city: \", change.doc.data());\n            tempFeed.push(change.doc.id);\n            let dat = change.doc.data();\n            if (change.doc.data().checkin) {\n              tempCheckins.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                timestamp: moment(dat.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: dat.checkinData\n              })\n            }\n            else {\n              tempThoughts.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                thought: dat.thought,\n                message: dat.message,\n                comments: dat.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(dat.timestamp).format('lll'),\n              })\n            }\n          }\n\n        });\n        console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));\n\n\n\n        element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n  }\n  componentWillUnmount() {\n    feedListen();\n  }\n\n  compare = (a, b) => {\n    if (a.timestamp < b.timestamp)\n      return -1;\n    if (a.timestamp > b.timestamp)\n      return 1;\n    return 0;\n  }\n\n\n  render() {\n\n\n    let feed = this.state.checkins.concat(this.state.thoughts);\n    feed.sort(this.compare);\n\n    let feedItems = feed.map((f, index) => {\n      if (f.checkinData) {\n        return <CheckinPost\n          uid={this.props.uid}\n          posterUid={f.uid}\n\n          PpfURL={f.PpfURL}\n          yourPpfURL={this.props.PpfURL}\n          key={toString(index)+\"_checkin\"}\n          name={f.name}\n          timestamp={f.timestamp}\n\n          postid={f.postid}\n          checkinData={f.checkinData}\n          firebase={this.props.firebase}\n        />;\n      } else {\n        return <ThoughtPost\n          uid={this.props.uid}\n          posterUid={f.uid}\n\n          PpfURL={f.PpfURL}\n          yourPpfURL={this.props.PpfURL}\n\n          key={toString(index)+\"_thought\"}\n          name={f.name}\n          thought={f.thought}\n          timestamp={f.timestamp}\n\n          message={f.message}\n          postid={f.postid}\n          firebase={this.props.firebase\n          } />;\n      }\n    }\n    );\n\n    // let feedItems = this.state.checkins.map((checkin, index) =>\n    //   <CheckinPost\n    //     uid={this.props.uid}\n    //     posterUid={checkin.uid}\n\n    //     PpfURL={checkin.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n    //     key={toString(index)}\n    //     name={checkin.name}\n    //     timestamp={checkin.timestamp}\n\n    //     postid={checkin.postid}\n    //     checkinData={checkin.checkinData}\n    //     firebase={this.props.firebase}\n    //   />\n    // );\n\n    // let thoughtItems = this.state.thoughts.map((thought, index) =>\n    //   <ThoughtPost\n    //     uid={this.props.uid}\n    //     posterUid={thought.uid}\n\n    //     PpfURL={thought.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n\n    //     key={toString(index)}\n    //     name={thought.name}\n    //     thought={thought.thought}\n    //     timestamp={thought.timestamp}\n\n    //     message={thought.message}\n    //     postid={thought.postid}\n    //     firebase={this.props.firebase\n    //     } />\n    // );\n    // console.log(checkinItems);\n    //combine checkinItems and thoughtItems then sort then render\n\n    return (\n\n      <section className=\"feed\">\n        <ThoughtInput\n          PpfURL={this.props.PpfURL}\n          name={this.props.name}\n          uid={this.props.uid}\n          network={this.props.network}\n          firebase={this.props.firebase}\n        />\n        <h1 className=\"date-marker\">February 17</h1>\n        {feedItems}\n\n\n        <ErrorMsg\n          src={graphics1}\n          header='Nothing more.'\n          msg='Why not post a thought?'\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default FeedTab;\n"]},"metadata":{},"sourceType":"module"}