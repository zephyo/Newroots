{"ast":null,"code":"import _classCallCheck from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Angela He/treehacks/src/components/FeedTab.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './Feed/CheckinPost';\nimport ThoughtPost from './Feed/ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './Feed/ThoughtInput';\nimport ThoughtProvoker from './Feed/ThoughtProvoker';\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './Misc/ErrorMsg';\nvar feedListen;\nvar initial = true;\n\nvar FeedTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FeedTab, _React$Component);\n\n  function FeedTab(props) {\n    var _this;\n\n    _classCallCheck(this, FeedTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedTab).call(this, props));\n\n    _this.compare = function (a, b) {\n      if (a.timestamp < b.timestamp) return 1;\n      if (a.timestamp > b.timestamp) return -1;\n      return 0;\n    };\n\n    _this.loadMore = function () {\n      console.log(\"LOAD MORE\");\n\n      var element = _assertThisInitialized(_this);\n\n      var first = _this.props.firebase.user(_this.props.uid).collection(\"feed\").orderBy(\"realtime\", \"desc\").limit(20).startAfter(_this.state.lastSeen);\n\n      var tempFeed = [];\n      first.get().then(function (documentSnapshots) {\n        if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n          element.setState({\n            lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n          });\n        }\n\n        documentSnapshots.forEach(function (doc) {\n          // doc.data() is never undefined for query doc snapshots\n          //console.log(doc.id, \" => \", doc.data());\n          //\n          var data = doc.data();\n          var struct;\n\n          if (doc.data().checkin) {\n            struct = {\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              timestamp: moment(data.timestamp).format('lll'),\n              postid: doc.id,\n              checkinData: data.checkinData\n            };\n          } else {\n            console.log(\"new thought\");\n            struct = {\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              thought: data.thought,\n              message: data.message,\n              comments: data.comm_cont,\n              conversation: [],\n              postid: doc.id,\n              timestamp: moment(data.timestamp).format('lll')\n            };\n          }\n\n          tempFeed.push(struct);\n        }); //tempFeed.reverse();\n\n        element.setState({\n          //feed:tempFeed\n          feed: element.state.feed.concat(tempFeed)\n        });\n        tempFeed = [];\n        initial = false;\n      });\n    };\n\n    _this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: [],\n      newItems: [],\n      lastSeen: '' //initial: true\n      //this.processTime = this.processTime.bind(this);\n\n    };\n    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(FeedTab, [{\n    key: \"handleScroll\",\n    value: function handleScroll() {\n      var windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n      var body = document.body;\n      var html = document.documentElement;\n      var docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n      var windowBottom = windowHeight + window.pageYOffset;\n\n      if (windowBottom >= docHeight) {\n        console.log(\"bootm \");\n        this.setState({\n          message: 'bottom reached'\n        });\n      } else {\n        console.log(\"noot bootm \");\n        this.setState({\n          message: 'not at bottom'\n        });\n      }\n    }\n    /*\n      -PpfURL : string (optional)\n      -name : string\n      -isMyPost : bool\n      -timestamp : string - e.g. a few seconds ago\n      -conversation : array\n     - example of conversation: \n    [\n      {\n        uid: 'fdsadsadaad'\n        PpfURL: '...'\n        poster: true //is message from poster\n        message: 'hi i love'\n        \n      },\n     ...\n    ]\n    */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //this.state.initial = true;\n      document.addEventListener(\"scroll\", this.handleScroll);\n      initial = true;\n      autosize($('textarea'));\n      var element = this;\n      var tempFeed = []; //let tempFeed = this.state.feed;\n      //let tempCheckins = this.state.checkins;\n      //let tempThoughts = this.state.thoughts;\n\n      feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        //console.log(\"brad \" + this.state.initial);\n        //element = this;\n        snapshot.docChanges().forEach(function (change) {\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            var data = change.doc.data();\n            var struct;\n\n            if (change.doc.data().checkin) {\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              };\n            } else {\n              console.log(\"new thought\");\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll')\n              };\n            }\n\n            if (!initial) {\n              tempFeed.push(struct);\n            } // console.log(struct.timestamp);\n\n          }\n        });\n        /*console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));*/\n\n        /*console.log(\"NOthing but  \" + initial);\n        if(initial === true){\n            console.log(\"SORT\");\n            tempFeed.sort(this.compare)\n        }\n        initial = false;\n        //console.log(tempfeed);\n        element.setState({\n            \n          feed: tempFeed\n            \n        })*/\n        //\n\n        if (!initial) {\n          tempFeed.sort(element.compare);\n          tempFeed.reverse();\n          console.log(\"bee bones\");\n          element.setState({\n            //newItems: element.state.newItems.concat(tempFeed)\n            newItems: tempFeed\n          });\n        }\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n\n      }); //var first = db.collection(\"cities\")\n\n      if (initial) {\n        var first = this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"realtime\", \"desc\").limit(20);\n        first.get().then(function (documentSnapshots) {\n          if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n            _this2.setState({\n              lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n            }, function () {\n              console.log(\"last seen \" + _this2.state.lastSeen.id);\n            });\n          }\n\n          documentSnapshots.forEach(function (doc) {\n            // doc.data() is never undefined for query doc snapshots\n            //console.log(doc.id, \" => \", doc.data());\n            //\n            var data = doc.data();\n            var struct;\n\n            if (doc.data().checkin) {\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: doc.id,\n                checkinData: data.checkinData\n              };\n            } else {\n              console.log(\"new thought\");\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: doc.id,\n                timestamp: moment(data.timestamp).format('lll')\n              };\n            }\n\n            tempFeed.push(struct);\n          }); //tempFeed.reverse();\n\n          element.setState({\n            feed: tempFeed\n          });\n          tempFeed = [];\n          initial = false;\n        });\n        /*this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"realtime\").get().then((documentSnapshots) => {\n            let ids = {}\n            let counter = 0;\n            documentSnapshots.docs.forEach((doc, index) => {\n                //function(doc) {\n                //ids.push(doc.id);\n                console.log(\"index \" + index);\n                ids[doc.id] = doc.data().timestamp;\n                //counter++;\n            })\n            Object.keys(ids).forEach((doc) => {\n                //console.log(doc, dictionary[key]);\n                this.props.firebase.user(this.props.uid).collection(\"feed\").doc(doc).update({\n                    realtime: moment(ids[doc]).format('lll')\n                })\n            });\n         })*/\n      }\n      /*return first.get().then(function (documentSnapshots) {\n        // Get the last visible document\n        var lastVisible = documentSnapshots.docs[documentSnapshots.docs.length-1];\n        console.log(\"last\", lastVisible);\n         // Construct a new query starting at this document,\n        // get the next 25 cities.\n        var next = db.collection(\"cities\")\n                .orderBy(\"population\")\n                .startAfter(lastVisible)\n                .limit(10);\n      });*/\n\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(this.props.loadMore);\n      console.log(nextProps.loadMore);\n\n      if (nextProps.loadMore === true) {\n        this.loadMore();\n      }\n      /*if (props.params.id !== nextProps.params.id) {\n        doSomething(nextProps.params.id);\n      }*/\n\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"scroll\", this.handleScroll);\n      feedListen();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      /*let local_feed = [];\n        console.log(\"this.state \" + this.state.initial);\n      if(this.state.initial){\n          console.log(\"SORT\");\n          this.setState({\n              feed:this.state.feed.sort(this.compare),\n              initial:false\n          },()=>{\n              local_feed = this.state.feed;\n          })\n          //local_feed.sort(this.compare);\n      }*/\n      var local_feed = this.state.newItems.concat(this.state.feed); //let local_feed = this.state.feed;\n      //local_feed.sort(this.compare);\n\n      var last_date = \"\";\n      var header = React.createElement(\"h1\", {\n        className: \"date-marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, \"February 17\");\n      var feedItems = local_feed.map(function (f, index) {\n        //f = local_feed[local_feed.length - 1 - index];\n        if (f.timestamp.split(\",\")[0] !== last_date) {\n          last_date = f.timestamp.split(\",\")[0]; // console.log(\"last date \" + last_date);\n\n          header = React.createElement(\"h1\", {\n            className: \"date-marker\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350\n            },\n            __self: this\n          }, last_date);\n        } else {\n          header = \"\";\n        }\n\n        if (f.checkinData) {\n          return React.createElement(\"div\", {\n            key: 'key' + index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 356\n            },\n            __self: this\n          }, header, React.createElement(CheckinPost, {\n            uid: _this3.props.uid,\n            posterUid: f.uid,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this3.props.PpfURL,\n            key: index.toString() + \"_checkin\",\n            name: f.name,\n            timestamp: f.timestamp,\n            postid: f.postid,\n            checkinData: f.checkinData,\n            firebase: _this3.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 358\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            key: 'key' + index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 373\n            },\n            __self: this\n          }, header, React.createElement(ThoughtPost, {\n            uid: _this3.props.uid,\n            posterUid: f.uid,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this3.props.PpfURL,\n            key: index.toString() + \"_thought\",\n            name: f.name,\n            thought: f.thought,\n            timestamp: f.timestamp,\n            message: f.message,\n            postid: f.postid,\n            firebase: _this3.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 375\n            },\n            __self: this\n          }));\n        }\n      }); // let feedItems = this.state.checkins.map((checkin, index) =>\n      //   <CheckinPost\n      //     uid={this.props.uid}\n      //     posterUid={checkin.uid}\n      //     PpfURL={checkin.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={checkin.name}\n      //     timestamp={checkin.timestamp}\n      //     postid={checkin.postid}\n      //     checkinData={checkin.checkinData}\n      //     firebase={this.props.firebase}\n      //   />\n      // );\n      // let thoughtItems = this.state.thoughts.map((thought, index) =>\n      //   <ThoughtPost\n      //     uid={this.props.uid}\n      //     posterUid={thought.uid}\n      //     PpfURL={thought.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={thought.name}\n      //     thought={thought.thought}\n      //     timestamp={thought.timestamp}\n      //     message={thought.message}\n      //     postid={thought.postid}\n      //     firebase={this.props.firebase\n      //     } />\n      // );\n      // console.log(checkinItems);\n      //combine checkinItems and thoughtItems then sort then render\n      //        <h1 className=\"date-marker\">February 17</h1>\n\n      return React.createElement(\"section\", {\n        className: \"feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(ThoughtProvoker, {\n        name: this.props.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }), React.createElement(ThoughtInput, {\n        PpfURL: this.props.PpfURL,\n        name: this.props.name,\n        uid: this.props.uid,\n        network: this.props.network,\n        firebase: this.props.firebase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }), feedItems, React.createElement(ErrorMsg, {\n        src: graphics1,\n        header: \"Nothing more.\",\n        msg: \"Why not post a thought?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FeedTab;\n}(React.Component);\n\nexport default FeedTab;","map":{"version":3,"sources":["/Volumes/Angela He/treehacks/src/components/FeedTab.js"],"names":["React","Component","$","autosize","CheckinPost","ThoughtPost","moment","ThoughtInput","ThoughtProvoker","graphics1","ErrorMsg","feedListen","initial","FeedTab","props","compare","a","b","timestamp","loadMore","console","log","element","first","firebase","user","uid","collection","orderBy","limit","startAfter","state","lastSeen","tempFeed","get","then","documentSnapshots","docs","length","setState","forEach","doc","data","struct","checkin","name","PpfURL","format","postid","id","checkinData","thought","message","comments","comm_cont","conversation","push","feed","concat","thoughts","checkins","newItems","handleScroll","bind","windowHeight","window","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","windowBottom","pageYOffset","addEventListener","onSnapshot","snapshot","docChanges","change","type","sort","reverse","nextProps","removeEventListener","local_feed","last_date","header","feedItems","map","f","index","split","toString","network"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './Feed/CheckinPost';\nimport ThoughtPost from './Feed/ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './Feed/ThoughtInput';\nimport ThoughtProvoker from './Feed/ThoughtProvoker';\n\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './Misc/ErrorMsg';\n\nlet feedListen;\nlet initial = true;\n\nclass FeedTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: [],\n      newItems: [],\n      lastSeen: ''\n      //initial: true\n    }\n    //this.processTime = this.processTime.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n  handleScroll() {\n    const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n    const body = document.body;\n    const html = document.documentElement;\n    const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    const windowBottom = windowHeight + window.pageYOffset;\n    if (windowBottom >= docHeight) {\n      console.log(\"bootm \");\n      this.setState({\n        message: 'bottom reached'\n      });\n    } else {\n      console.log(\"noot bootm \");\n      this.setState({\n        message: 'not at bottom'\n      });\n    }\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n\n  - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n  compare = (a, b) => {\n    if (a.timestamp < b.timestamp)\n      return 1;\n    if (a.timestamp > b.timestamp)\n      return -1;\n    return 0;\n  }\n\n  loadMore = () => {\n    console.log(\"LOAD MORE\");\n    const element = this;\n    var first = this.props.firebase.user(this.props.uid).collection(\"feed\")\n      .orderBy(\"realtime\", \"desc\")\n      .limit(20)\n      .startAfter(this.state.lastSeen);\n\n    let tempFeed = [];\n    first.get().then(function (documentSnapshots) {\n      if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n        element.setState({\n          lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n        })\n      }\n      documentSnapshots.forEach(function (doc) {\n        // doc.data() is never undefined for query doc snapshots\n        //console.log(doc.id, \" => \", doc.data());\n        //\n        let data = doc.data();\n        let struct;\n        if (doc.data().checkin) {\n          struct = ({\n            uid: data.uid,\n            name: data.name,\n            PpfURL: data.PpfURL,\n            timestamp: moment(data.timestamp).format('lll'),\n            postid: doc.id,\n            checkinData: data.checkinData\n          })\n        }\n        else {\n          console.log(\"new thought\");\n          struct = ({\n            uid: data.uid,\n            name: data.name,\n            PpfURL: data.PpfURL,\n            thought: data.thought,\n            message: data.message,\n            comments: data.comm_cont,\n            conversation: [],\n            postid: doc.id,\n            timestamp: moment(data.timestamp).format('lll'),\n          })\n        }\n        tempFeed.push(struct);\n      });\n      //tempFeed.reverse();\n      element.setState({\n        //feed:tempFeed\n        feed: element.state.feed.concat(tempFeed)\n      })\n      tempFeed = [];\n      initial = false;\n    })\n\n  }\n\n  componentDidMount() {\n    //this.state.initial = true;\n    document.addEventListener(\"scroll\", this.handleScroll);\n    initial = true;\n    autosize($('textarea'));\n    let element = this;\n    let tempFeed = [];\n    //let tempFeed = this.state.feed;\n    //let tempCheckins = this.state.checkins;\n    //let tempThoughts = this.state.thoughts;\n    feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\")\n      .onSnapshot((snapshot) => {\n        //let tempFeed = [];\n        //console.log(\"brad \" + this.state.initial);\n        //element = this;\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            let data = change.doc.data();\n            let struct;\n            if (change.doc.data().checkin) {\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              })\n            }\n            else {\n              console.log(\"new thought\");\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll'),\n              })\n            }\n            if (!initial) {\n              tempFeed.push(struct);\n            }\n            // console.log(struct.timestamp);\n          }\n\n        });\n        /*console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));*/\n\n        /*console.log(\"NOthing but  \" + initial);\n        if(initial === true){\n            console.log(\"SORT\");\n            tempFeed.sort(this.compare)\n        }\n        initial = false;\n        //console.log(tempfeed);\n        element.setState({\n            \n          feed: tempFeed\n            \n        })*/\n\n        //\n        if (!initial) {\n          tempFeed.sort(element.compare);\n          tempFeed.reverse();\n          console.log(\"bee bones\");\n          element.setState({\n            //newItems: element.state.newItems.concat(tempFeed)\n            newItems: tempFeed\n          })\n        }\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n\n\n    //var first = db.collection(\"cities\")\n    if (initial) {\n      var first = this.props.firebase.user(this.props.uid).collection(\"feed\")\n        .orderBy(\"realtime\", \"desc\")\n        .limit(20);\n\n      first.get().then((documentSnapshots) => {\n        if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n          this.setState({\n            lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n          }, () => {\n            console.log(\"last seen \" + this.state.lastSeen.id);\n          })\n        }\n        documentSnapshots.forEach(function (doc) {\n          // doc.data() is never undefined for query doc snapshots\n          //console.log(doc.id, \" => \", doc.data());\n          //\n          let data = doc.data();\n          let struct;\n          if (doc.data().checkin) {\n            struct = ({\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              timestamp: moment(data.timestamp).format('lll'),\n              postid: doc.id,\n              checkinData: data.checkinData\n            })\n          }\n          else {\n            console.log(\"new thought\");\n            struct = ({\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              thought: data.thought,\n              message: data.message,\n              comments: data.comm_cont,\n              conversation: [],\n              postid: doc.id,\n              timestamp: moment(data.timestamp).format('lll'),\n            })\n          }\n          tempFeed.push(struct);\n        });\n        //tempFeed.reverse();\n        element.setState({\n          feed: tempFeed\n        })\n        tempFeed = [];\n        initial = false;\n      })\n      /*this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"realtime\").get().then((documentSnapshots) => {\n          let ids = {}\n          let counter = 0;\n          documentSnapshots.docs.forEach((doc, index) => {\n              //function(doc) {\n              //ids.push(doc.id);\n              console.log(\"index \" + index);\n              ids[doc.id] = doc.data().timestamp;\n              //counter++;\n          })\n          Object.keys(ids).forEach((doc) => {\n              //console.log(doc, dictionary[key]);\n              this.props.firebase.user(this.props.uid).collection(\"feed\").doc(doc).update({\n                  realtime: moment(ids[doc]).format('lll')\n              })\n          });\n\n      })*/\n    }\n    /*return first.get().then(function (documentSnapshots) {\n      // Get the last visible document\n      var lastVisible = documentSnapshots.docs[documentSnapshots.docs.length-1];\n      console.log(\"last\", lastVisible);\n\n      // Construct a new query starting at this document,\n      // get the next 25 cities.\n      var next = db.collection(\"cities\")\n              .orderBy(\"population\")\n              .startAfter(lastVisible)\n              .limit(10);\n    });*/\n\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n    console.log(this.props.loadMore);\n    console.log(nextProps.loadMore);\n    if (nextProps.loadMore === true) {\n      this.loadMore();\n    }\n    /*if (props.params.id !== nextProps.params.id) {\n      doSomething(nextProps.params.id);\n    }*/\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"scroll\", this.handleScroll);\n    feedListen();\n  }\n\n\n\n\n  render() {\n\n    /*let local_feed = [];\n      console.log(\"this.state \" + this.state.initial);\n    if(this.state.initial){\n        console.log(\"SORT\");\n        this.setState({\n            feed:this.state.feed.sort(this.compare),\n            initial:false\n        },()=>{\n            local_feed = this.state.feed;\n        })\n        //local_feed.sort(this.compare);\n    }*/\n    let local_feed = (this.state.newItems.concat(this.state.feed));\n    //let local_feed = this.state.feed;\n\n    //local_feed.sort(this.compare);\n    let last_date = \"\";\n    let header = <h1 className=\"date-marker\">February 17</h1>;\n    let feedItems = local_feed.map((f, index) => {\n      //f = local_feed[local_feed.length - 1 - index];\n      if (f.timestamp.split(\",\")[0] !== last_date) {\n        last_date = f.timestamp.split(\",\")[0];\n        // console.log(\"last date \" + last_date);\n        header = <h1 className=\"date-marker\">{last_date}</h1>;\n      }\n      else {\n        header = \"\";\n      }\n      if (f.checkinData) {\n        return <div key={'key' + index}>\n          {header}\n          <CheckinPost\n            uid={this.props.uid}\n            posterUid={f.uid}\n\n            PpfURL={f.PpfURL}\n            yourPpfURL={this.props.PpfURL}\n            key={index.toString() + \"_checkin\"}\n            name={f.name}\n            timestamp={f.timestamp}\n\n            postid={f.postid}\n            checkinData={f.checkinData}\n            firebase={this.props.firebase}\n          /></div>;\n      } else {\n        return <div key={'key' + index}>\n          {header}\n          <ThoughtPost\n            uid={this.props.uid}\n            posterUid={f.uid}\n\n            PpfURL={f.PpfURL}\n            yourPpfURL={this.props.PpfURL}\n\n            key={index.toString() + \"_thought\"}\n            name={f.name}\n            thought={f.thought}\n            timestamp={f.timestamp}\n\n            message={f.message}\n            postid={f.postid}\n            firebase={this.props.firebase\n            } /></div>;\n      }\n    }\n    );\n\n    // let feedItems = this.state.checkins.map((checkin, index) =>\n    //   <CheckinPost\n    //     uid={this.props.uid}\n    //     posterUid={checkin.uid}\n\n    //     PpfURL={checkin.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n    //     key={toString(index)}\n    //     name={checkin.name}\n    //     timestamp={checkin.timestamp}\n\n    //     postid={checkin.postid}\n    //     checkinData={checkin.checkinData}\n    //     firebase={this.props.firebase}\n    //   />\n    // );\n\n    // let thoughtItems = this.state.thoughts.map((thought, index) =>\n    //   <ThoughtPost\n    //     uid={this.props.uid}\n    //     posterUid={thought.uid}\n\n    //     PpfURL={thought.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n\n    //     key={toString(index)}\n    //     name={thought.name}\n    //     thought={thought.thought}\n    //     timestamp={thought.timestamp}\n\n    //     message={thought.message}\n    //     postid={thought.postid}\n    //     firebase={this.props.firebase\n    //     } />\n    // );\n    // console.log(checkinItems);\n    //combine checkinItems and thoughtItems then sort then render\n    //        <h1 className=\"date-marker\">February 17</h1>\n    return (\n\n      <section className=\"feed\">\n\n        <ThoughtProvoker\n          name={this.props.name}\n        />\n\n        <ThoughtInput\n          PpfURL={this.props.PpfURL}\n          name={this.props.name}\n          uid={this.props.uid}\n          network={this.props.network}\n          firebase={this.props.firebase}\n        />\n\n        {feedItems}\n\n\n        <ErrorMsg\n          src={graphics1}\n          header='Nothing more.'\n          msg='Why not post a thought?'\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default FeedTab;"]},"metadata":{},"sourceType":"module"}