{"ast":null,"code":"import _classCallCheck from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Angela He/treehacks/src/components/FeedTab.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './Feed/CheckinPost';\nimport ThoughtPost from './Feed/ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './Feed/ThoughtInput';\nimport ThoughtProvoker from './Feed/ThoughtProvoker';\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './Misc/ErrorMsg';\nimport Loading from './Misc/Loading';\nvar feedListen;\nvar initial = true;\n\nvar FeedTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FeedTab, _React$Component);\n\n  function FeedTab(props) {\n    var _this;\n\n    _classCallCheck(this, FeedTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedTab).call(this, props));\n\n    _this.compare = function (a, b) {\n      if (a.timestamp < b.timestamp) return 1;\n      if (a.timestamp > b.timestamp) return -1;\n      return 0;\n    };\n\n    _this.loadMore = function () {\n      console.log(\"LOAD MORE\");\n\n      _this.setState({\n        loading: true\n      });\n\n      var element = _assertThisInitialized(_this);\n\n      var first = _this.props.firebase.user(_this.props.uid).collection(\"feed\").orderBy(\"realtime\", \"desc\").limit(20).startAfter(_this.state.lastSeen);\n\n      var tempFeed = [];\n      first.get().then(function (documentSnapshots) {\n        if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n          element.setState({\n            lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n          });\n        }\n\n        documentSnapshots.forEach(function (doc) {\n          // doc.data() is never undefined for query doc snapshots\n          //console.log(doc.id, \" => \", doc.data());\n          //\n          var data = doc.data();\n          var struct;\n\n          if (doc.data().checkin) {\n            struct = {\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              timestamp: moment(data.timestamp).format('lll'),\n              postid: doc.id,\n              checkinData: data.checkinData\n            };\n          } else {\n            console.log(\"new thought\");\n            struct = {\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              thought: data.thought,\n              message: data.message,\n              comments: data.comm_cont,\n              conversation: [],\n              postid: doc.id,\n              timestamp: moment(data.timestamp).format('lll')\n            };\n          }\n\n          tempFeed.push(struct);\n        }); //tempFeed.reverse();\n\n        element.setState({\n          //feed:tempFeed\n          feed: element.state.feed.concat(tempFeed),\n          loading: false\n        });\n        tempFeed = [];\n        initial = false;\n      });\n    };\n\n    _this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: [],\n      newItems: [],\n      lastSeen: '',\n      loading: false //initial: true\n      //this.processTime = this.processTime.bind(this);\n\n    };\n    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(FeedTab, [{\n    key: \"handleScroll\",\n    value: function handleScroll() {\n      var windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n      var body = document.body;\n      var html = document.documentElement;\n      var docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n      var windowBottom = windowHeight + window.pageYOffset;\n\n      if (windowBottom >= docHeight) {\n        console.log(\"bootm \");\n        this.setState({\n          message: 'bottom reached'\n        });\n      } else {\n        console.log(\"noot bootm \");\n        this.setState({\n          message: 'not at bottom'\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //this.state.initial = true;\n      document.addEventListener(\"scroll\", this.handleScroll);\n      initial = true;\n      autosize($('textarea'));\n      var element = this;\n      var tempFeed = []; //let tempFeed = this.state.feed;\n      //let tempCheckins = this.state.checkins;\n      //let tempThoughts = this.state.thoughts;\n\n      feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        //console.log(\"brad \" + this.state.initial);\n        //element = this;\n        snapshot.docChanges().forEach(function (change) {\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            var data = change.doc.data();\n            var struct;\n\n            if (change.doc.data().checkin) {\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              };\n            } else {\n              console.log(\"new thought\");\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll')\n              };\n            }\n\n            if (!initial) {\n              tempFeed.push(struct);\n            } // console.log(struct.timestamp);\n\n          }\n        });\n\n        if (!initial) {\n          tempFeed.sort(element.compare);\n          tempFeed.reverse();\n          console.log(\"bee bones\");\n          element.setState({\n            //newItems: element.state.newItems.concat(tempFeed)\n            newItems: tempFeed\n          });\n        }\n      }); //var first = db.collection(\"cities\")\n\n      if (initial) {\n        var first = this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"realtime\", \"desc\").limit(20);\n        first.get().then(function (documentSnapshots) {\n          if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n            _this2.setState({\n              lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n            }, function () {\n              console.log(\"last seen \" + _this2.state.lastSeen.id);\n            });\n          }\n\n          documentSnapshots.forEach(function (doc) {\n            // doc.data() is never undefined for query doc snapshots\n            //console.log(doc.id, \" => \", doc.data());\n            //\n            var data = doc.data();\n            var struct;\n\n            if (doc.data().checkin) {\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: doc.id,\n                checkinData: data.checkinData\n              };\n            } else {\n              console.log(\"new thought\");\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: doc.id,\n                timestamp: moment(data.timestamp).format('lll')\n              };\n            }\n\n            tempFeed.push(struct);\n          }); //tempFeed.reverse();\n\n          element.setState({\n            feed: tempFeed\n          });\n          tempFeed = [];\n          initial = false;\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(this.props.loadMore);\n      console.log(nextProps.loadMore);\n\n      if (nextProps.loadMore === true) {\n        this.loadMore();\n      }\n      /*if (props.params.id !== nextProps.params.id) {\n        doSomething(nextProps.params.id);\n      }*/\n\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"scroll\", this.handleScroll);\n      feedListen();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var local_feed = this.state.newItems.concat(this.state.feed);\n      var last_date = null;\n      var feedItems = [];\n\n      for (var index = 0; index < local_feed.length; index++) {\n        var post = local_feed[index];\n\n        if (post.timestamp.split(\",\")[0] !== last_date) {\n          last_date = post.timestamp.split(\",\")[0]; // console.log(\"last date \" + last_date);\n\n          feedItems.push(React.createElement(\"h1\", {\n            className: \"date-marker\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          }, last_date));\n        }\n\n        if (post.checkinData) {\n          feedItems.push(React.createElement(CheckinPost, {\n            uid: this.props.uid,\n            yourNetwork: this.props.network,\n            posterUid: post.uid,\n            PpfURL: post.PpfURL,\n            yourPpfURL: this.props.PpfURL,\n            key: index.toString() + \"_checkin\",\n            name: post.name,\n            timestamp: post.timestamp,\n            postid: post.postid,\n            checkinData: post.checkinData,\n            firebase: this.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279\n            },\n            __self: this\n          }));\n        } else {\n          feedItems.push(React.createElement(ThoughtPost, {\n            uid: this.props.uid,\n            posterUid: post.uid,\n            PpfURL: post.PpfURL,\n            yourPpfURL: this.props.PpfURL,\n            key: index.toString() + \"_thought\",\n            name: post.name,\n            thought: post.thought,\n            timestamp: post.timestamp,\n            message: post.message,\n            postid: post.postid,\n            firebase: this.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 296\n            },\n            __self: this\n          }));\n        }\n      }\n\n      var loadingEl = null;\n\n      if (this.state.loading) {\n        loadingEl = React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318\n          },\n          __self: this\n        });\n      } else {\n        loadingEl = React.createElement(ErrorMsg, {\n          src: graphics1,\n          header: \"Nothing more.\",\n          msg: \"Why not post a thought?\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"section\", {\n        className: \"feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(ThoughtProvoker, {\n        name: this.props.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }), React.createElement(ThoughtInput, {\n        PpfURL: this.props.PpfURL,\n        name: this.props.name,\n        uid: this.props.uid,\n        network: this.props.network,\n        firebase: this.props.firebase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }), feedItems, loadingEl);\n    }\n  }]);\n\n  return FeedTab;\n}(React.Component);\n\nexport default FeedTab;","map":{"version":3,"sources":["/Volumes/Angela He/treehacks/src/components/FeedTab.js"],"names":["React","Component","$","autosize","CheckinPost","ThoughtPost","moment","ThoughtInput","ThoughtProvoker","graphics1","ErrorMsg","Loading","feedListen","initial","FeedTab","props","compare","a","b","timestamp","loadMore","console","log","setState","loading","element","first","firebase","user","uid","collection","orderBy","limit","startAfter","state","lastSeen","tempFeed","get","then","documentSnapshots","docs","length","forEach","doc","data","struct","checkin","name","PpfURL","format","postid","id","checkinData","thought","message","comments","comm_cont","conversation","push","feed","concat","thoughts","checkins","newItems","handleScroll","bind","windowHeight","window","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","windowBottom","pageYOffset","addEventListener","onSnapshot","snapshot","docChanges","change","type","sort","reverse","nextProps","removeEventListener","local_feed","last_date","feedItems","index","post","split","network","toString","loadingEl"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,IAAIC,UAAJ;AACA,IAAIC,OAAO,GAAG,IAAd;;IAEMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;;AADiB,UAgCnBC,OAhCmB,GAgCT,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAClB,UAAID,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EACE,OAAO,CAAP;AACF,UAAIF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EACE,OAAO,CAAC,CAAR;AACF,aAAO,CAAP;AACD,KAtCkB;;AAAA,UAwCnBC,QAxCmB,GAwCR,YAAM;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AAEA,YAAKC,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAC;AAAT,OAAd;;AAEA,UAAMC,OAAO,gCAAb;;AACA,UAAIC,KAAK,GAAG,MAAKX,KAAL,CAAWY,QAAX,CAAoBC,IAApB,CAAyB,MAAKb,KAAL,CAAWc,GAApC,EAAyCC,UAAzC,CAAoD,MAApD,EACTC,OADS,CACD,UADC,EACW,MADX,EAETC,KAFS,CAEH,EAFG,EAGTC,UAHS,CAGE,MAAKC,KAAL,CAAWC,QAHb,CAAZ;;AAKA,UAAIC,QAAQ,GAAG,EAAf;AACAV,MAAAA,KAAK,CAACW,GAAN,GAAYC,IAAZ,CAAiB,UAAUC,iBAAV,EAA6B;AAC5C,YAAIA,iBAAiB,CAACC,IAAlB,CAAuBD,iBAAiB,CAACC,IAAlB,CAAuBC,MAAvB,GAAgC,CAAvD,CAAJ,EAA+D;AAC7DhB,UAAAA,OAAO,CAACF,QAAR,CAAiB;AACfY,YAAAA,QAAQ,EAAEI,iBAAiB,CAACC,IAAlB,CAAuBD,iBAAiB,CAACC,IAAlB,CAAuBC,MAAvB,GAAgC,CAAvD;AADK,WAAjB;AAGD;;AACDF,QAAAA,iBAAiB,CAACG,OAAlB,CAA0B,UAAUC,GAAV,EAAe;AACvC;AACA;AACA;AACA,cAAIC,IAAI,GAAGD,GAAG,CAACC,IAAJ,EAAX;AACA,cAAIC,MAAJ;;AACA,cAAIF,GAAG,CAACC,IAAJ,GAAWE,OAAf,EAAwB;AACtBD,YAAAA,MAAM,GAAI;AACRhB,cAAAA,GAAG,EAAEe,IAAI,CAACf,GADF;AAERkB,cAAAA,IAAI,EAAEH,IAAI,CAACG,IAFH;AAGRC,cAAAA,MAAM,EAAEJ,IAAI,CAACI,MAHL;AAIR7B,cAAAA,SAAS,EAAEb,MAAM,CAACsC,IAAI,CAACzB,SAAN,CAAN,CAAuB8B,MAAvB,CAA8B,KAA9B,CAJH;AAKRC,cAAAA,MAAM,EAAEP,GAAG,CAACQ,EALJ;AAMRC,cAAAA,WAAW,EAAER,IAAI,CAACQ;AANV,aAAV;AAQD,WATD,MAUK;AACH/B,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAuB,YAAAA,MAAM,GAAI;AACRhB,cAAAA,GAAG,EAAEe,IAAI,CAACf,GADF;AAERkB,cAAAA,IAAI,EAAEH,IAAI,CAACG,IAFH;AAGRC,cAAAA,MAAM,EAAEJ,IAAI,CAACI,MAHL;AAIRK,cAAAA,OAAO,EAAET,IAAI,CAACS,OAJN;AAKRC,cAAAA,OAAO,EAAEV,IAAI,CAACU,OALN;AAMRC,cAAAA,QAAQ,EAAEX,IAAI,CAACY,SANP;AAORC,cAAAA,YAAY,EAAE,EAPN;AAQRP,cAAAA,MAAM,EAAEP,GAAG,CAACQ,EARJ;AASRhC,cAAAA,SAAS,EAAEb,MAAM,CAACsC,IAAI,CAACzB,SAAN,CAAN,CAAuB8B,MAAvB,CAA8B,KAA9B;AATH,aAAV;AAWD;;AACDb,UAAAA,QAAQ,CAACsB,IAAT,CAAcb,MAAd;AACD,SA/BD,EAN4C,CAsC5C;;AACApB,QAAAA,OAAO,CAACF,QAAR,CAAiB;AACf;AACAoC,UAAAA,IAAI,EAAElC,OAAO,CAACS,KAAR,CAAcyB,IAAd,CAAmBC,MAAnB,CAA0BxB,QAA1B,CAFS;AAGfZ,UAAAA,OAAO,EAAE;AAHM,SAAjB;AAKAY,QAAAA,QAAQ,GAAG,EAAX;AACAvB,QAAAA,OAAO,GAAG,KAAV;AACD,OA9CD;AAgDD,KApGkB;;AAEjB,UAAKqB,KAAL,GAAa;AACX2B,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXH,MAAAA,IAAI,EAAE,EAHK;AAIXI,MAAAA,QAAQ,EAAE,EAJC;AAKX5B,MAAAA,QAAQ,EAAE,EALC;AAMXX,MAAAA,OAAO,EAAE,KANE,CAOX;AAEF;;AATa,KAAb;AAUA,UAAKwC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AAZiB;AAalB;;;;mCACc;AACb,UAAMC,YAAY,GAAG,iBAAiBC,MAAjB,GAA0BA,MAAM,CAACC,WAAjC,GAA+CC,QAAQ,CAACC,eAAT,CAAyBC,YAA7F;AACA,UAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAtB;AACA,UAAMC,IAAI,GAAGJ,QAAQ,CAACC,eAAtB;AACA,UAAMI,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASJ,IAAI,CAACK,YAAd,EAA4BL,IAAI,CAACD,YAAjC,EAA+CE,IAAI,CAACK,YAApD,EAAkEL,IAAI,CAACI,YAAvE,EAAqFJ,IAAI,CAACF,YAA1F,CAAlB;AACA,UAAMQ,YAAY,GAAGb,YAAY,GAAGC,MAAM,CAACa,WAA3C;;AACA,UAAID,YAAY,IAAIL,SAApB,EAA+B;AAC7BrD,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aAAKC,QAAL,CAAc;AACZ+B,UAAAA,OAAO,EAAE;AADG,SAAd;AAGD,OALD,MAKO;AACLjC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAKC,QAAL,CAAc;AACZ+B,UAAAA,OAAO,EAAE;AADG,SAAd;AAGD;AACF;;;wCAuEmB;AAAA;;AAClB;AACAe,MAAAA,QAAQ,CAACY,gBAAT,CAA0B,QAA1B,EAAoC,KAAKjB,YAAzC;AACAnD,MAAAA,OAAO,GAAG,IAAV;AACAV,MAAAA,QAAQ,CAACD,CAAC,CAAC,UAAD,CAAF,CAAR;AACA,UAAIuB,OAAO,GAAG,IAAd;AACA,UAAIW,QAAQ,GAAG,EAAf,CANkB,CAOlB;AACA;AACA;;AACAxB,MAAAA,UAAU,GAAG,KAAKG,KAAL,CAAWY,QAAX,CAAoBC,IAApB,CAAyB,KAAKb,KAAL,CAAWc,GAApC,EAAyCC,UAAzC,CAAoD,MAApD,EACVoD,UADU,CACC,UAACC,QAAD,EAAc;AACxB;AACA;AACA;AACAA,QAAAA,QAAQ,CAACC,UAAT,GAAsB1C,OAAtB,CAA8B,UAAC2C,MAAD,EAAY;AACxC,cAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B;AACA;AACA,gBAAI1C,IAAI,GAAGyC,MAAM,CAAC1C,GAAP,CAAWC,IAAX,EAAX;AACA,gBAAIC,MAAJ;;AACA,gBAAIwC,MAAM,CAAC1C,GAAP,CAAWC,IAAX,GAAkBE,OAAtB,EAA+B;AAC7BD,cAAAA,MAAM,GAAI;AACRhB,gBAAAA,GAAG,EAAEe,IAAI,CAACf,GADF;AAERkB,gBAAAA,IAAI,EAAEH,IAAI,CAACG,IAFH;AAGRC,gBAAAA,MAAM,EAAEJ,IAAI,CAACI,MAHL;AAIR7B,gBAAAA,SAAS,EAAEb,MAAM,CAACsC,IAAI,CAACzB,SAAN,CAAN,CAAuB8B,MAAvB,CAA8B,KAA9B,CAJH;AAKRC,gBAAAA,MAAM,EAAEmC,MAAM,CAAC1C,GAAP,CAAWQ,EALX;AAMRC,gBAAAA,WAAW,EAAER,IAAI,CAACQ;AANV,eAAV;AAQD,aATD,MAUK;AACH/B,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAuB,cAAAA,MAAM,GAAI;AACRhB,gBAAAA,GAAG,EAAEe,IAAI,CAACf,GADF;AAERkB,gBAAAA,IAAI,EAAEH,IAAI,CAACG,IAFH;AAGRC,gBAAAA,MAAM,EAAEJ,IAAI,CAACI,MAHL;AAIRK,gBAAAA,OAAO,EAAET,IAAI,CAACS,OAJN;AAKRC,gBAAAA,OAAO,EAAEV,IAAI,CAACU,OALN;AAMRC,gBAAAA,QAAQ,EAAEX,IAAI,CAACY,SANP;AAORC,gBAAAA,YAAY,EAAE,EAPN;AAQRP,gBAAAA,MAAM,EAAEmC,MAAM,CAAC1C,GAAP,CAAWQ,EARX;AASRhC,gBAAAA,SAAS,EAAEb,MAAM,CAACsC,IAAI,CAACzB,SAAN,CAAN,CAAuB8B,MAAvB,CAA8B,KAA9B;AATH,eAAV;AAWD;;AACD,gBAAI,CAACpC,OAAL,EAAc;AACZuB,cAAAA,QAAQ,CAACsB,IAAT,CAAcb,MAAd;AACD,aA/B0B,CAgC3B;;AACD;AAEF,SApCD;;AAqCA,YAAI,CAAChC,OAAL,EAAc;AACZuB,UAAAA,QAAQ,CAACmD,IAAT,CAAc9D,OAAO,CAACT,OAAtB;AACAoB,UAAAA,QAAQ,CAACoD,OAAT;AACAnE,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAG,UAAAA,OAAO,CAACF,QAAR,CAAiB;AACf;AACAwC,YAAAA,QAAQ,EAAE3B;AAFK,WAAjB;AAID;AACF,OAnDU,CAAb,CAVkB,CAgElB;;AACA,UAAIvB,OAAJ,EAAa;AACX,YAAIa,KAAK,GAAG,KAAKX,KAAL,CAAWY,QAAX,CAAoBC,IAApB,CAAyB,KAAKb,KAAL,CAAWc,GAApC,EAAyCC,UAAzC,CAAoD,MAApD,EACTC,OADS,CACD,UADC,EACW,MADX,EAETC,KAFS,CAEH,EAFG,CAAZ;AAIAN,QAAAA,KAAK,CAACW,GAAN,GAAYC,IAAZ,CAAiB,UAACC,iBAAD,EAAuB;AACtC,cAAIA,iBAAiB,CAACC,IAAlB,CAAuBD,iBAAiB,CAACC,IAAlB,CAAuBC,MAAvB,GAAgC,CAAvD,CAAJ,EAA+D;AAC7D,YAAA,MAAI,CAAClB,QAAL,CAAc;AACZY,cAAAA,QAAQ,EAAEI,iBAAiB,CAACC,IAAlB,CAAuBD,iBAAiB,CAACC,IAAlB,CAAuBC,MAAvB,GAAgC,CAAvD;AADE,aAAd,EAEG,YAAM;AACPpB,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAe,MAAI,CAACY,KAAL,CAAWC,QAAX,CAAoBgB,EAA/C;AACD,aAJD;AAKD;;AACDZ,UAAAA,iBAAiB,CAACG,OAAlB,CAA0B,UAAUC,GAAV,EAAe;AACvC;AACA;AACA;AACA,gBAAIC,IAAI,GAAGD,GAAG,CAACC,IAAJ,EAAX;AACA,gBAAIC,MAAJ;;AACA,gBAAIF,GAAG,CAACC,IAAJ,GAAWE,OAAf,EAAwB;AACtBD,cAAAA,MAAM,GAAI;AACRhB,gBAAAA,GAAG,EAAEe,IAAI,CAACf,GADF;AAERkB,gBAAAA,IAAI,EAAEH,IAAI,CAACG,IAFH;AAGRC,gBAAAA,MAAM,EAAEJ,IAAI,CAACI,MAHL;AAIR7B,gBAAAA,SAAS,EAAEb,MAAM,CAACsC,IAAI,CAACzB,SAAN,CAAN,CAAuB8B,MAAvB,CAA8B,KAA9B,CAJH;AAKRC,gBAAAA,MAAM,EAAEP,GAAG,CAACQ,EALJ;AAMRC,gBAAAA,WAAW,EAAER,IAAI,CAACQ;AANV,eAAV;AAQD,aATD,MAUK;AACH/B,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAuB,cAAAA,MAAM,GAAI;AACRhB,gBAAAA,GAAG,EAAEe,IAAI,CAACf,GADF;AAERkB,gBAAAA,IAAI,EAAEH,IAAI,CAACG,IAFH;AAGRC,gBAAAA,MAAM,EAAEJ,IAAI,CAACI,MAHL;AAIRK,gBAAAA,OAAO,EAAET,IAAI,CAACS,OAJN;AAKRC,gBAAAA,OAAO,EAAEV,IAAI,CAACU,OALN;AAMRC,gBAAAA,QAAQ,EAAEX,IAAI,CAACY,SANP;AAORC,gBAAAA,YAAY,EAAE,EAPN;AAQRP,gBAAAA,MAAM,EAAEP,GAAG,CAACQ,EARJ;AASRhC,gBAAAA,SAAS,EAAEb,MAAM,CAACsC,IAAI,CAACzB,SAAN,CAAN,CAAuB8B,MAAvB,CAA8B,KAA9B;AATH,eAAV;AAWD;;AACDb,YAAAA,QAAQ,CAACsB,IAAT,CAAcb,MAAd;AACD,WA/BD,EARsC,CAwCtC;;AACApB,UAAAA,OAAO,CAACF,QAAR,CAAiB;AACfoC,YAAAA,IAAI,EAAEvB;AADS,WAAjB;AAGAA,UAAAA,QAAQ,GAAG,EAAX;AACAvB,UAAAA,OAAO,GAAG,KAAV;AACD,SA9CD;AA+CD;AAEF;;;8CAGyB4E,S,EAAW;AACnCpE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWK,QAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYmE,SAAS,CAACrE,QAAtB;;AACA,UAAIqE,SAAS,CAACrE,QAAV,KAAuB,IAA3B,EAAiC;AAC/B,aAAKA,QAAL;AACD;AACD;;;;AAGD;;;2CAEsB;AACrBiD,MAAAA,QAAQ,CAACqB,mBAAT,CAA6B,QAA7B,EAAuC,KAAK1B,YAA5C;AACApD,MAAAA,UAAU;AACX;;;6BAKQ;AAEP,UAAI+E,UAAU,GAAI,KAAKzD,KAAL,CAAW6B,QAAX,CAAoBH,MAApB,CAA2B,KAAK1B,KAAL,CAAWyB,IAAtC,CAAlB;AAEA,UAAIiC,SAAS,GAAG,IAAhB;AACA,UAAIC,SAAS,GAAG,EAAhB;;AAEA,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,UAAU,CAAClD,MAAvC,EAA+CqD,KAAK,EAApD,EAAwD;AACtD,YAAIC,IAAI,GAAGJ,UAAU,CAACG,KAAD,CAArB;;AAEA,YAAIC,IAAI,CAAC5E,SAAL,CAAe6E,KAAf,CAAqB,GAArB,EAA0B,CAA1B,MAAiCJ,SAArC,EAAgD;AAC9CA,UAAAA,SAAS,GAAGG,IAAI,CAAC5E,SAAL,CAAe6E,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAZ,CAD8C,CAE9C;;AACAH,UAAAA,SAAS,CAACnC,IAAV,CAAe;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA6BkC,SAA7B,CAAf;AACD;;AAED,YAAIG,IAAI,CAAC3C,WAAT,EAAsB;AACpByC,UAAAA,SAAS,CAACnC,IAAV,CACE,oBAAC,WAAD;AACE,YAAA,GAAG,EAAE,KAAK3C,KAAL,CAAWc,GADlB;AAEE,YAAA,WAAW,EAAE,KAAKd,KAAL,CAAWkF,OAF1B;AAGE,YAAA,SAAS,EAAEF,IAAI,CAAClE,GAHlB;AAKE,YAAA,MAAM,EAAEkE,IAAI,CAAC/C,MALf;AAME,YAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWiC,MANzB;AAOE,YAAA,GAAG,EAAE8C,KAAK,CAACI,QAAN,KAAmB,UAP1B;AAQE,YAAA,IAAI,EAAEH,IAAI,CAAChD,IARb;AASE,YAAA,SAAS,EAAEgD,IAAI,CAAC5E,SATlB;AAWE,YAAA,MAAM,EAAE4E,IAAI,CAAC7C,MAXf;AAYE,YAAA,WAAW,EAAE6C,IAAI,CAAC3C,WAZpB;AAaE,YAAA,QAAQ,EAAE,KAAKrC,KAAL,CAAWY,QAbvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD,SAjBD,MAiBO;AACLkE,UAAAA,SAAS,CAACnC,IAAV,CACE,oBAAC,WAAD;AACE,YAAA,GAAG,EAAE,KAAK3C,KAAL,CAAWc,GADlB;AAEE,YAAA,SAAS,EAAEkE,IAAI,CAAClE,GAFlB;AAIE,YAAA,MAAM,EAAEkE,IAAI,CAAC/C,MAJf;AAKE,YAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWiC,MALzB;AAOE,YAAA,GAAG,EAAE8C,KAAK,CAACI,QAAN,KAAmB,UAP1B;AAQE,YAAA,IAAI,EAAEH,IAAI,CAAChD,IARb;AASE,YAAA,OAAO,EAAEgD,IAAI,CAAC1C,OAThB;AAUE,YAAA,SAAS,EAAE0C,IAAI,CAAC5E,SAVlB;AAYE,YAAA,OAAO,EAAE4E,IAAI,CAACzC,OAZhB;AAaE,YAAA,MAAM,EAAEyC,IAAI,CAAC7C,MAbf;AAcE,YAAA,QAAQ,EAAE,KAAKnC,KAAL,CAAWY,QAdvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;AACF;;AAGD,UAAIwE,SAAS,GAAG,IAAhB;;AACA,UAAI,KAAKjE,KAAL,CAAWV,OAAf,EAAwB;AACtB2E,QAAAA,SAAS,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,SAAS,GAAG,oBAAC,QAAD;AACV,UAAA,GAAG,EAAE1F,SADK;AAEV,UAAA,MAAM,EAAC,eAFG;AAGV,UAAA,GAAG,EAAC,yBAHM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAZ;AAKD;;AAED,aAEE;AAAS,QAAA,SAAS,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,eAAD;AACE,QAAA,IAAI,EAAE,KAAKM,KAAL,CAAWgC,IADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAME,oBAAC,YAAD;AACE,QAAA,MAAM,EAAE,KAAKhC,KAAL,CAAWiC,MADrB;AAEE,QAAA,IAAI,EAAE,KAAKjC,KAAL,CAAWgC,IAFnB;AAGE,QAAA,GAAG,EAAE,KAAKhC,KAAL,CAAWc,GAHlB;AAIE,QAAA,OAAO,EAAE,KAAKd,KAAL,CAAWkF,OAJtB;AAKE,QAAA,QAAQ,EAAE,KAAKlF,KAAL,CAAWY,QALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAcGkE,SAdH,EAgBGM,SAhBH,CAFF;AAuBD;;;;EA7UmBnG,KAAK,CAACC,S;;AAgV5B,eAAea,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './Feed/CheckinPost';\nimport ThoughtPost from './Feed/ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './Feed/ThoughtInput';\nimport ThoughtProvoker from './Feed/ThoughtProvoker';\n\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './Misc/ErrorMsg';\nimport Loading from './Misc/Loading';\n\nlet feedListen;\nlet initial = true;\n\nclass FeedTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: [],\n      newItems: [],\n      lastSeen: '',\n      loading: false,\n      //initial: true\n    }\n    //this.processTime = this.processTime.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n  handleScroll() {\n    const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n    const body = document.body;\n    const html = document.documentElement;\n    const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    const windowBottom = windowHeight + window.pageYOffset;\n    if (windowBottom >= docHeight) {\n      console.log(\"bootm \");\n      this.setState({\n        message: 'bottom reached'\n      });\n    } else {\n      console.log(\"noot bootm \");\n      this.setState({\n        message: 'not at bottom'\n      });\n    }\n  }\n  compare = (a, b) => {\n    if (a.timestamp < b.timestamp)\n      return 1;\n    if (a.timestamp > b.timestamp)\n      return -1;\n    return 0;\n  }\n\n  loadMore = () => {\n    console.log(\"LOAD MORE\");\n\n    this.setState({loading:true});\n\n    const element = this;\n    var first = this.props.firebase.user(this.props.uid).collection(\"feed\")\n      .orderBy(\"realtime\", \"desc\")\n      .limit(20)\n      .startAfter(this.state.lastSeen);\n\n    let tempFeed = [];\n    first.get().then(function (documentSnapshots) {\n      if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n        element.setState({\n          lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n        })\n      }\n      documentSnapshots.forEach(function (doc) {\n        // doc.data() is never undefined for query doc snapshots\n        //console.log(doc.id, \" => \", doc.data());\n        //\n        let data = doc.data();\n        let struct;\n        if (doc.data().checkin) {\n          struct = ({\n            uid: data.uid,\n            name: data.name,\n            PpfURL: data.PpfURL,\n            timestamp: moment(data.timestamp).format('lll'),\n            postid: doc.id,\n            checkinData: data.checkinData\n          })\n        }\n        else {\n          console.log(\"new thought\");\n          struct = ({\n            uid: data.uid,\n            name: data.name,\n            PpfURL: data.PpfURL,\n            thought: data.thought,\n            message: data.message,\n            comments: data.comm_cont,\n            conversation: [],\n            postid: doc.id,\n            timestamp: moment(data.timestamp).format('lll'),\n          })\n        }\n        tempFeed.push(struct);\n      });\n      //tempFeed.reverse();\n      element.setState({\n        //feed:tempFeed\n        feed: element.state.feed.concat(tempFeed),\n        loading: false\n      })\n      tempFeed = [];\n      initial = false;\n    })\n\n  }\n\n  componentDidMount() {\n    //this.state.initial = true;\n    document.addEventListener(\"scroll\", this.handleScroll);\n    initial = true;\n    autosize($('textarea'));\n    let element = this;\n    let tempFeed = [];\n    //let tempFeed = this.state.feed;\n    //let tempCheckins = this.state.checkins;\n    //let tempThoughts = this.state.thoughts;\n    feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\")\n      .onSnapshot((snapshot) => {\n        //let tempFeed = [];\n        //console.log(\"brad \" + this.state.initial);\n        //element = this;\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            let data = change.doc.data();\n            let struct;\n            if (change.doc.data().checkin) {\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              })\n            }\n            else {\n              console.log(\"new thought\");\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll'),\n              })\n            }\n            if (!initial) {\n              tempFeed.push(struct);\n            }\n            // console.log(struct.timestamp);\n          }\n\n        });\n        if (!initial) {\n          tempFeed.sort(element.compare);\n          tempFeed.reverse();\n          console.log(\"bee bones\");\n          element.setState({\n            //newItems: element.state.newItems.concat(tempFeed)\n            newItems: tempFeed\n          })\n        }\n      });\n\n\n    //var first = db.collection(\"cities\")\n    if (initial) {\n      var first = this.props.firebase.user(this.props.uid).collection(\"feed\")\n        .orderBy(\"realtime\", \"desc\")\n        .limit(20);\n\n      first.get().then((documentSnapshots) => {\n        if (documentSnapshots.docs[documentSnapshots.docs.length - 1]) {\n          this.setState({\n            lastSeen: documentSnapshots.docs[documentSnapshots.docs.length - 1]\n          }, () => {\n            console.log(\"last seen \" + this.state.lastSeen.id);\n          })\n        }\n        documentSnapshots.forEach(function (doc) {\n          // doc.data() is never undefined for query doc snapshots\n          //console.log(doc.id, \" => \", doc.data());\n          //\n          let data = doc.data();\n          let struct;\n          if (doc.data().checkin) {\n            struct = ({\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              timestamp: moment(data.timestamp).format('lll'),\n              postid: doc.id,\n              checkinData: data.checkinData\n            })\n          }\n          else {\n            console.log(\"new thought\");\n            struct = ({\n              uid: data.uid,\n              name: data.name,\n              PpfURL: data.PpfURL,\n              thought: data.thought,\n              message: data.message,\n              comments: data.comm_cont,\n              conversation: [],\n              postid: doc.id,\n              timestamp: moment(data.timestamp).format('lll'),\n            })\n          }\n          tempFeed.push(struct);\n        });\n        //tempFeed.reverse();\n        element.setState({\n          feed: tempFeed\n        })\n        tempFeed = [];\n        initial = false;\n      })\n    }\n\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n    console.log(this.props.loadMore);\n    console.log(nextProps.loadMore);\n    if (nextProps.loadMore === true) {\n      this.loadMore();\n    }\n    /*if (props.params.id !== nextProps.params.id) {\n      doSomething(nextProps.params.id);\n    }*/\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"scroll\", this.handleScroll);\n    feedListen();\n  }\n\n\n\n\n  render() {\n\n    let local_feed = (this.state.newItems.concat(this.state.feed));\n\n    let last_date = null;\n    let feedItems = [];\n\n    for (let index = 0; index < local_feed.length; index++) {\n      let post = local_feed[index];\n\n      if (post.timestamp.split(\",\")[0] !== last_date) {\n        last_date = post.timestamp.split(\",\")[0];\n        // console.log(\"last date \" + last_date);\n        feedItems.push(<h1 className=\"date-marker\">{last_date}</h1>);\n      }\n\n      if (post.checkinData) {\n        feedItems.push(\n          <CheckinPost\n            uid={this.props.uid}\n            yourNetwork={this.props.network}\n            posterUid={post.uid}\n\n            PpfURL={post.PpfURL}\n            yourPpfURL={this.props.PpfURL}\n            key={index.toString() + \"_checkin\"}\n            name={post.name}\n            timestamp={post.timestamp}\n\n            postid={post.postid}\n            checkinData={post.checkinData}\n            firebase={this.props.firebase}\n          />);\n      } else {\n        feedItems.push(\n          <ThoughtPost\n            uid={this.props.uid}\n            posterUid={post.uid}\n\n            PpfURL={post.PpfURL}\n            yourPpfURL={this.props.PpfURL}\n\n            key={index.toString() + \"_thought\"}\n            name={post.name}\n            thought={post.thought}\n            timestamp={post.timestamp}\n\n            message={post.message}\n            postid={post.postid}\n            firebase={this.props.firebase\n            } />);\n      }\n    }\n\n\n    let loadingEl = null;\n    if (this.state.loading) {\n      loadingEl = <Loading />;\n    } else {\n      loadingEl = <ErrorMsg\n        src={graphics1}\n        header='Nothing more.'\n        msg='Why not post a thought?'\n      />;\n    }\n\n    return (\n\n      <section className=\"feed\">\n\n        <ThoughtProvoker\n          name={this.props.name}\n        />\n\n        <ThoughtInput\n          PpfURL={this.props.PpfURL}\n          name={this.props.name}\n          uid={this.props.uid}\n          network={this.props.network}\n          firebase={this.props.firebase}\n        />\n\n        {feedItems}\n\n        {loadingEl}\n\n\n      </section>\n    );\n  }\n}\n\nexport default FeedTab;"]},"metadata":{},"sourceType":"module"}