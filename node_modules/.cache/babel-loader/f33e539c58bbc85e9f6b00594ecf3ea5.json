{"ast":null,"code":"import _classCallCheck from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './ThoughtInput';\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\nvar feedListen;\n\nvar FeedTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FeedTab, _React$Component);\n\n  function FeedTab(props) {\n    var _this;\n\n    _classCallCheck(this, FeedTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedTab).call(this, props));\n\n    _this.compare = function (a, b) {\n      if (a.timestamp < b.timestamp) return 1;\n      if (a.timestamp > b.timestamp) return -1;\n      return 0;\n    };\n\n    _this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: [] //this.processTime = this.processTime.bind(this);\n\n    };\n    return _this;\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n   - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n\n\n  _createClass(FeedTab, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      autosize($('textarea'));\n      var element = this;\n      var tempFeed = []; //let tempCheckins = this.state.checkins;\n      //let tempThoughts = this.state.thoughts;\n\n      feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"timestamp\").onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach(function (change) {\n          console.log(\"changety[e]: \" + change.type);\n\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            var data = change.doc.data();\n            var struct;\n\n            if (change.doc.data().checkin) {\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              };\n            } else {\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll')\n              };\n            }\n\n            tempFeed.push(struct);\n            console.log(struct.timestamp);\n          }\n        });\n        /*console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));*/\n\n        element.setState({\n          /*checkins: tempCheckins,\n          thoughts: tempThoughts*/\n          feed: tempFeed\n        });\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      feedListen();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //let feed = this.state.checkins.concat(this.state.thoughts);\n      var local_feed = this.state.feed;\n      local_feed.sort(this.compare); //console.log(\"local_feed \" + local_feed[0].timestamp);\n\n      var last_date = \"\";\n      var new_date = false;\n      var header = React.createElement(\"h1\", {\n        className: \"date-marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"February 17\");\n      var feedItems = local_feed.map(function (f, index) {\n        if (f.timestamp.split(\",\")[0] !== last_date) {\n          header = React.createElement(\"h1\", {\n            className: \"date-marker\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, \"February 17\");\n        } else {\n          header = \"\";\n        }\n\n        if (f.checkinData) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, header, \" \", React.createElement(CheckinPost, {\n            uid: _this2.props.uid,\n            posterUid: f.uid,\n            newDate: new_date,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this2.props.PpfURL,\n            key: index.toString() + \"_checkin\",\n            name: f.name,\n            timestamp: f.timestamp,\n            postid: f.postid,\n            checkinData: f.checkinData,\n            firebase: _this2.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }, header, \" \", React.createElement(ThoughtPost, {\n            uid: _this2.props.uid,\n            posterUid: f.uid,\n            newDate: new_date,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this2.props.PpfURL,\n            key: index.toString() + \"_thought\",\n            name: f.name,\n            thought: f.thought,\n            timestamp: f.timestamp,\n            message: f.message,\n            postid: f.postid,\n            firebase: _this2.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }));\n        }\n      }); // let feedItems = this.state.checkins.map((checkin, index) =>\n      //   <CheckinPost\n      //     uid={this.props.uid}\n      //     posterUid={checkin.uid}\n      //     PpfURL={checkin.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={checkin.name}\n      //     timestamp={checkin.timestamp}\n      //     postid={checkin.postid}\n      //     checkinData={checkin.checkinData}\n      //     firebase={this.props.firebase}\n      //   />\n      // );\n      // let thoughtItems = this.state.thoughts.map((thought, index) =>\n      //   <ThoughtPost\n      //     uid={this.props.uid}\n      //     posterUid={thought.uid}\n      //     PpfURL={thought.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={thought.name}\n      //     thought={thought.thought}\n      //     timestamp={thought.timestamp}\n      //     message={thought.message}\n      //     postid={thought.postid}\n      //     firebase={this.props.firebase\n      //     } />\n      // );\n      // console.log(checkinItems);\n      //combine checkinItems and thoughtItems then sort then render\n\n      return React.createElement(\"section\", {\n        className: \"feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(ThoughtInput, {\n        PpfURL: this.props.PpfURL,\n        name: this.props.name,\n        uid: this.props.uid,\n        network: this.props.network,\n        firebase: this.props.firebase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"date-marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"February 17\"), feedItems, React.createElement(ErrorMsg, {\n        src: graphics1,\n        header: \"Nothing more.\",\n        msg: \"Why not post a thought?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FeedTab;\n}(React.Component);\n\nexport default FeedTab;","map":{"version":3,"sources":["/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js"],"names":["React","Component","$","autosize","CheckinPost","ThoughtPost","moment","ThoughtInput","graphics1","ErrorMsg","feedListen","FeedTab","props","compare","a","b","timestamp","state","thoughts","checkins","feed","element","tempFeed","firebase","user","uid","collection","orderBy","onSnapshot","snapshot","docChanges","forEach","change","console","log","type","data","doc","struct","checkin","name","PpfURL","format","postid","id","checkinData","thought","message","comments","comm_cont","conversation","push","setState","local_feed","sort","last_date","new_date","header","feedItems","map","f","index","split","toString","network"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './ThoughtInput';\n\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\n\nlet feedListen;\n\nclass FeedTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: []\n    }\n    //this.processTime = this.processTime.bind(this);\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n\n  - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n  componentDidMount() {\n    autosize($('textarea'));\n    let element = this;\n    let tempFeed = [];\n    //let tempCheckins = this.state.checkins;\n    //let tempThoughts = this.state.thoughts;\n    feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").orderBy(\"timestamp\")\n      .onSnapshot((snapshot) => {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach((change) => {\n          console.log(\"changety[e]: \" + change.type);\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            let data = change.doc.data();\n            let struct;\n            if (change.doc.data().checkin) {\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              })\n            }\n            else {\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll'),\n              })\n            }\n            tempFeed.push(struct);\n            console.log(struct.timestamp);\n          }\n\n        });\n        /*console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));*/\n\n\n        \n        element.setState({\n          /*checkins: tempCheckins,\n          thoughts: tempThoughts*/\n            feed:tempFeed\n        })\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n  }\n  componentWillUnmount() {\n    feedListen();\n  }\n\n  compare = (a, b) => {\n    if (a.timestamp < b.timestamp)\n      return 1;\n    if (a.timestamp > b.timestamp)\n      return -1;\n    return 0;\n  }\n\n\n  render() {\n\n\n    //let feed = this.state.checkins.concat(this.state.thoughts);\n    let local_feed = this.state.feed;\n    local_feed.sort(this.compare);\n    //console.log(\"local_feed \" + local_feed[0].timestamp);\n    let last_date = \"\";\n    let new_date = false;\n    let header = <h1 className=\"date-marker\">February 17</h1>;\n    let feedItems = local_feed.map((f, index) => {\n        if(f.timestamp.split(\",\")[0] !== last_date){\n             header = <h1 className=\"date-marker\">February 17</h1>;\n        }\n        else{\n             header = \"\";\n        }\n        if (f.checkinData) {\n            return <div>{header} <CheckinPost\n            uid={this.props.uid}\n            posterUid={f.uid}\n            newDate = {new_date}\n            PpfURL={f.PpfURL}\n            yourPpfURL={this.props.PpfURL}\n            key={index.toString()+\"_checkin\"}\n            name={f.name}\n            timestamp={f.timestamp}\n\n            postid={f.postid}\n            checkinData={f.checkinData}\n            firebase={this.props.firebase}\n            /></div>;\n        } else {\n            return <div>{header} <ThoughtPost\n            uid={this.props.uid}\n            posterUid={f.uid}\n            newDate = {new_date}\n            PpfURL={f.PpfURL}\n            yourPpfURL={this.props.PpfURL}\n\n            key={index.toString()+\"_thought\"}\n            name={f.name}\n            thought={f.thought}\n            timestamp={f.timestamp}\n\n            message={f.message}\n            postid={f.postid}\n            firebase={this.props.firebase\n            } /></div>;\n        }\n    }\n    );\n\n    // let feedItems = this.state.checkins.map((checkin, index) =>\n    //   <CheckinPost\n    //     uid={this.props.uid}\n    //     posterUid={checkin.uid}\n\n    //     PpfURL={checkin.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n    //     key={toString(index)}\n    //     name={checkin.name}\n    //     timestamp={checkin.timestamp}\n\n    //     postid={checkin.postid}\n    //     checkinData={checkin.checkinData}\n    //     firebase={this.props.firebase}\n    //   />\n    // );\n\n    // let thoughtItems = this.state.thoughts.map((thought, index) =>\n    //   <ThoughtPost\n    //     uid={this.props.uid}\n    //     posterUid={thought.uid}\n\n    //     PpfURL={thought.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n\n    //     key={toString(index)}\n    //     name={thought.name}\n    //     thought={thought.thought}\n    //     timestamp={thought.timestamp}\n\n    //     message={thought.message}\n    //     postid={thought.postid}\n    //     firebase={this.props.firebase\n    //     } />\n    // );\n    // console.log(checkinItems);\n    //combine checkinItems and thoughtItems then sort then render\n\n    return (\n\n      <section className=\"feed\">\n        <ThoughtInput\n          PpfURL={this.props.PpfURL}\n          name={this.props.name}\n          uid={this.props.uid}\n          network={this.props.network}\n          firebase={this.props.firebase}\n        />\n        <h1 className=\"date-marker\">February 17</h1>\n        {feedItems}\n\n\n        <ErrorMsg\n          src={graphics1}\n          header='Nothing more.'\n          msg='Why not post a thought?'\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default FeedTab;\n"]},"metadata":{},"sourceType":"module"}