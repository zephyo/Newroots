{"ast":null,"code":"import _classCallCheck from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Angela He/treehacks/src/components/Feed/CheckinPost.js\";\nimport React from 'react';\nimport Avatar from '../Misc/Avatar';\nimport CommentBox from './CommentBox';\nimport CommentBut from './CommentBut';\nimport Comments from './Comments';\nimport EditButton from './EditButton';\n/*\n  props:\n  -PpfURL : string (optional)\n  -name : string\n  -isMyPost : bool\n  -timestamp : string - e.g. a few seconds ago\n  -checkinData : array\n\n  -conversation :array\n\n  - example of checkinData: \n    [\n      {\n        q: 'How are you feeling today?'\n        type: 'range'\n        answer: '5',\n        comment: 'hi'\n      },\n      {\n        q: 'Did you take your medication?'\n        type: 'yes/no'\n        answer: 'yes'\n        comment: 'hi'\n      },\n      {\n        q: 'u gey?'\n        type: 'text'\n        answer: 'dsadsdsaadadada'\n      }\n    ]\n*/\n\nvar CheckinPost =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CheckinPost, _React$Component);\n\n  function CheckinPost(props) {\n    var _this;\n\n    _classCallCheck(this, CheckinPost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckinPost).call(this, props));\n\n    _this.loadedComments = function () {\n      return _this.state.conversation.length !== 0;\n    };\n\n    _this.compare = function (a, b) {\n      if (a.timestamp < b.timestamp) return -1;\n      if (a.timestamp > b.timestamp) return 1;\n      return 0;\n    };\n\n    _this.loadComments = function () {\n      if (!_this.loadedComments()) {\n        //load comments\n        var tempConvo = []; //get once snapshot\n\n        _this.props.firebase.posts().doc(_this.props.postid).collection(\"conversation\").get().then(function (querySnapshot) {\n          querySnapshot.forEach(function (doc) {\n            // doc.data() is never undefined for query doc snapshots\n            var dat = doc.data();\n            tempConvo.push({\n              uid: dat.uid,\n              isMyPost: dat.uid == _this.props.uid,\n              PpfURL: dat.PpfURL,\n              poster: dat.poster,\n              timestamp: dat.timestamp,\n              message: dat.message\n            });\n          }); //at end, set state of conversation and showconversation\n\n          tempConvo.sort(_this.compare);\n\n          _this.setState({\n            conversation: tempConvo,\n            conversationLength: tempConvo.length,\n            showComments: !_this.state.showComments\n          });\n        });\n      } else {\n        _this.setState({\n          showComments: !_this.state.showComments\n        });\n      }\n    };\n\n    _this.state = {\n      conversation: [],\n      conversationLength: 0,\n      showComments: false\n    };\n    return _this;\n  }\n\n  _createClass(CheckinPost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.firebase.posts().doc(this.props.postid).collection(\"conversation\").onSnapshot(function (snapshot) {\n        var tempConvo = _this2.state.conversation;\n\n        if (_this2.loadedComments()) {\n          snapshot.docChanges().forEach(function (change) {\n            if (change.type === \"added\") {\n              var dat = change.doc.data();\n              tempConvo.push({\n                uid: dat.uid,\n                isMyPost: dat.uid == _this2.props.uid,\n                PpfURL: dat.PpfURL,\n                poster: dat.poster,\n                timestamp: dat.timestamp,\n                message: dat.message\n              });\n            }\n          });\n        }\n\n        _this2.setState({\n          conversation: tempConvo,\n          conversationLength: snapshot.size\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var checkinData = this.props.checkinData;\n      var checkins = [];\n\n      for (var i = 0; i < checkinData.length; i++) {\n        var checkin = checkinData[i];\n        var el = null;\n\n        if (checkin.type == 'range') {\n          el = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"mood\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }, checkin.q, \" \"), React.createElement(\"div\", {\n            className: \"mood-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, checkin.answer)), React.createElement(\"div\", {\n            className: \"content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          }, checkin.comment));\n        } else if (checkin.type == 'yes/no') {\n          el = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"mood\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, checkin.q), checkin.answer == 'yes' ? React.createElement(\"div\", {\n            className: \"mood-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"jam jam-check\",\n            style: {\n              color: '#EFF0DA'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          })) : React.createElement(\"div\", {\n            className: \"mood-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"jam jam-close\",\n            style: {\n              color: '#EFF0DA'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          }))), React.createElement(\"div\", {\n            className: \"content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          }, checkin.comment));\n        } else if (checkin.type == 'text') {\n          el = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"mood\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            },\n            __self: this\n          }, checkin.q, \" \")), React.createElement(\"div\", {\n            className: \"content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, checkin.answer));\n        }\n\n        checkins.push(el);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"checkin activity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        PpfURL: this.props.PpfURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"name-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, this.props.name), React.createElement(\"span\", {\n        className: \"sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"\\xA0checked in\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, this.props.timestamp))), React.createElement(EditButton, {\n        isOwnPost: this.props.posterUid == this.props.uid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, checkins), React.createElement(CommentBut, {\n        loadComments: this.loadComments,\n        commentLength: this.state.conversationLength,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        showComments: this.state.showComments,\n        conversation: this.state.conversation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(CommentBox, {\n        uid: this.props.uid,\n        PpfURL: this.props.yourPpfURL,\n        poster: this.props.name,\n        firebase: this.props.firebase,\n        postid: this.props.postid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CheckinPost;\n}(React.Component);\n\n;\nexport default CheckinPost;","map":{"version":3,"sources":["/Volumes/Angela He/treehacks/src/components/Feed/CheckinPost.js"],"names":["React","Avatar","CommentBox","CommentBut","Comments","EditButton","CheckinPost","props","loadedComments","state","conversation","length","compare","a","b","timestamp","loadComments","tempConvo","firebase","posts","doc","postid","collection","get","then","querySnapshot","forEach","dat","data","push","uid","isMyPost","PpfURL","poster","message","sort","setState","conversationLength","showComments","onSnapshot","snapshot","docChanges","change","type","size","checkinData","checkins","i","checkin","el","q","answer","comment","color","name","posterUid","yourPpfURL","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Avatar from '../Misc/Avatar';\nimport CommentBox from './CommentBox';\nimport CommentBut from './CommentBut';\nimport Comments from './Comments';\nimport EditButton from './EditButton';\n\n\n/*\n  props:\n  -PpfURL : string (optional)\n  -name : string\n  -isMyPost : bool\n  -timestamp : string - e.g. a few seconds ago\n  -checkinData : array\n\n  -conversation :array\n\n  - example of checkinData: \n    [\n      {\n        q: 'How are you feeling today?'\n        type: 'range'\n        answer: '5',\n        comment: 'hi'\n      },\n      {\n        q: 'Did you take your medication?'\n        type: 'yes/no'\n        answer: 'yes'\n        comment: 'hi'\n      },\n      {\n        q: 'u gey?'\n        type: 'text'\n        answer: 'dsadsdsaadadada'\n      }\n    ]\n*/\nclass CheckinPost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conversation: [],\n      conversationLength: 0,\n      showComments: false\n    }\n  }\n  componentDidMount() {\n\n    this.props.firebase.posts().doc(this.props.postid).collection(\"conversation\").onSnapshot((snapshot) => {\n\n      let tempConvo = this.state.conversation;\n\n      if (this.loadedComments()) {\n\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            let dat = change.doc.data();\n            tempConvo.push({\n              uid: dat.uid,\n              isMyPost: dat.uid == this.props.uid,\n              PpfURL: dat.PpfURL,\n              poster: dat.poster,\n              timestamp: dat.timestamp,\n              message: dat.message\n            })\n          }\n\n        });\n      }\n      this.setState({\n        conversation: tempConvo,\n        conversationLength: snapshot.size\n      });\n\n    });\n\n  }\n\n  loadedComments = () => {\n    return this.state.conversation.length !== 0;\n  }\n\n\n  compare = (a, b) => {\n    if (a.timestamp < b.timestamp)\n      return -1;\n    if (a.timestamp > b.timestamp)\n      return 1;\n    return 0;\n  }\n\n  loadComments = () => {\n\n    if (!this.loadedComments()) {\n\n      //load comments\n      let tempConvo = [];\n\n      //get once snapshot\n      this.props.firebase.posts().doc(this.props.postid).collection(\"conversation\").get().then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          // doc.data() is never undefined for query doc snapshots\n          let dat = doc.data();\n          tempConvo.push({\n            uid: dat.uid,\n            isMyPost: dat.uid == this.props.uid,\n            PpfURL: dat.PpfURL,\n            poster: dat.poster,\n            timestamp: dat.timestamp,\n            message: dat.message\n          })\n        });\n\n        //at end, set state of conversation and showconversation\n\n        tempConvo.sort(this.compare);\n\n        this.setState({\n          conversation: tempConvo,\n          conversationLength: tempConvo.length,\n          showComments: !this.state.showComments\n        });\n      });\n\n\n    } else {\n      this.setState({ showComments: !this.state.showComments })\n    }\n  }\n\n\n\n  render() {\n\n    let checkinData = this.props.checkinData;\n\n    let checkins = [];\n\n    for (var i = 0; i < checkinData.length; i++) {\n      let checkin = checkinData[i];\n      let el = null;\n\n      if (checkin.type == 'range') {\n        el = (\n          <div>\n            <div className=\"mood\">\n              <span>{checkin.q} </span>\n              <div className=\"mood-icon\">{checkin.answer}</div>\n            </div>\n            <div className=\"content\">{checkin.comment}</div>\n          </div>\n        );\n      }\n      else if (checkin.type == 'yes/no') {\n        el = (\n          <div>\n            <div className=\"mood\">\n              <span>{checkin.q}</span>\n              {checkin.answer == 'yes' ?\n                <div className=\"mood-icon\">\n                  <span className=\"jam jam-check\" style={{ color: '#EFF0DA' }}>\n\n                  </span>\n                </div>\n                :\n                <div className=\"mood-icon\">\n                  <span className=\"jam jam-close\" style={{ color: '#EFF0DA' }}>\n\n                  </span>\n                </div>\n              }\n            </div>\n            <div className=\"content\">{checkin.comment}</div>\n          </div>\n        );\n      }\n      else if (checkin.type == 'text') {\n        el = (\n          <div>\n            <div className=\"mood\">\n              <span>{checkin.q} </span>\n            </div>\n            <div className=\"content\">{checkin.answer}</div>\n          </div>\n        );\n      }\n      checkins.push(el);\n    }\n\n    return (\n      <div className=\"checkin activity\">\n        <div className=\"header\">\n          <Avatar PpfURL={this.props.PpfURL} />\n          <div className=\"name-date\">\n            <div><span className=\"name\">{this.props.name}</span>\n              <span className=\"sub\">&nbsp;checked in</span></div>\n            <div><span className=\"date\">{this.props.timestamp}</span></div>\n          </div>\n\n          <EditButton\n            isOwnPost={this.props.posterUid == this.props.uid}\n          />\n\n        </div>\n        <div className=\"content\">\n\n          {checkins}\n\n        </div>\n\n\n        <CommentBut\n          loadComments={this.loadComments}\n          commentLength={this.state.conversationLength}\n        />\n        <Comments\n          showComments={this.state.showComments}\n          conversation={this.state.conversation}\n        />\n        <CommentBox\n          uid={this.props.uid}\n          PpfURL={this.props.yourPpfURL}\n          poster={this.props.name}\n          firebase={this.props.firebase}\n          postid={this.props.postid}\n        />\n      </div>\n    );\n  }\n};\n\nexport default CheckinPost;\n"]},"metadata":{},"sourceType":"module"}