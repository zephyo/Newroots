{"ast":null,"code":"import _classCallCheck from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './Feed/CheckinPost';\nimport ThoughtPost from './Feed/ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './Feed/ThoughtInput';\nimport ThoughtProvoker from './Feed/ThoughtProvoker';\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './Misc/ErrorMsg';\nvar feedListen;\nvar initial = true;\n\nvar FeedTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FeedTab, _React$Component);\n\n  function FeedTab(props) {\n    var _this;\n\n    _classCallCheck(this, FeedTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedTab).call(this, props));\n\n    _this.compare = function (a, b) {\n      if (a.timestamp < b.timestamp) return 1;\n      if (a.timestamp > b.timestamp) return -1;\n      return 0;\n    };\n\n    _this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: [] //initial: true\n      //this.processTime = this.processTime.bind(this);\n\n    };\n    return _this;\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n   - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n\n\n  _createClass(FeedTab, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //this.state.initial = true;\n      autosize($('textarea'));\n      var element = this;\n      var tempFeed = this.state.feed; //let tempCheckins = this.state.checkins;\n      //let tempThoughts = this.state.thoughts;\n\n      feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        //console.log(\"brad \" + this.state.initial);\n        //element = this;\n        snapshot.docChanges().forEach(function (change) {\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            var data = change.doc.data();\n            var struct;\n\n            if (change.doc.data().checkin) {\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              };\n            } else {\n              console.log(\"new thought\");\n              struct = {\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll')\n              };\n            }\n\n            tempFeed.push(struct); // console.log(struct.timestamp);\n          }\n        });\n        /*console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));*/\n\n        console.log(\"NOthing but  \" + initial);\n\n        if (initial === true) {\n          console.log(\"SORT\");\n          tempFeed.sort(_this2.compare);\n        }\n\n        initial = false; //console.log(tempfeed);\n\n        element.setState({\n          /*checkins: tempCheckins,\n          thoughts: tempThoughts*/\n          feed: tempFeed\n        });\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      feedListen();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      /*let local_feed = [];\n        console.log(\"this.state \" + this.state.initial);\n      if(this.state.initial){\n          console.log(\"SORT\");\n          this.setState({\n              feed:this.state.feed.sort(this.compare),\n              initial:false\n          },()=>{\n              local_feed = this.state.feed;\n          })\n          //local_feed.sort(this.compare);\n      }*/\n      var local_feed = this.state.feed; //let local_feed = this.state.feed;\n      //local_feed.sort(this.compare);\n\n      var last_date = \"\";\n      var header = React.createElement(\"h1\", {\n        className: \"date-marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"February 17\");\n      var feedItems = local_feed.map(function (f, index) {\n        if (f.timestamp.split(\",\")[0] !== last_date) {\n          last_date = f.timestamp.split(\",\")[0]; // console.log(\"last date \" + last_date);\n\n          header = React.createElement(\"h1\", {\n            className: \"date-marker\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          }, last_date);\n        } else {\n          header = \"\";\n        }\n\n        if (f.checkinData) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, header, \" \", React.createElement(CheckinPost, {\n            uid: _this3.props.uid,\n            posterUid: f.uid,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this3.props.PpfURL,\n            key: index.toString() + \"_checkin\",\n            name: f.name,\n            timestamp: f.timestamp,\n            postid: f.postid,\n            checkinData: f.checkinData,\n            firebase: _this3.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }, header, \" \", React.createElement(ThoughtPost, {\n            uid: _this3.props.uid,\n            posterUid: f.uid,\n            PpfURL: f.PpfURL,\n            yourPpfURL: _this3.props.PpfURL,\n            key: index.toString() + \"_thought\",\n            name: f.name,\n            thought: f.thought,\n            timestamp: f.timestamp,\n            message: f.message,\n            postid: f.postid,\n            firebase: _this3.props.firebase,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }));\n        }\n      }); // let feedItems = this.state.checkins.map((checkin, index) =>\n      //   <CheckinPost\n      //     uid={this.props.uid}\n      //     posterUid={checkin.uid}\n      //     PpfURL={checkin.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={checkin.name}\n      //     timestamp={checkin.timestamp}\n      //     postid={checkin.postid}\n      //     checkinData={checkin.checkinData}\n      //     firebase={this.props.firebase}\n      //   />\n      // );\n      // let thoughtItems = this.state.thoughts.map((thought, index) =>\n      //   <ThoughtPost\n      //     uid={this.props.uid}\n      //     posterUid={thought.uid}\n      //     PpfURL={thought.PpfURL}\n      //     yourPpfURL={this.props.PpfURL}\n      //     key={toString(index)}\n      //     name={thought.name}\n      //     thought={thought.thought}\n      //     timestamp={thought.timestamp}\n      //     message={thought.message}\n      //     postid={thought.postid}\n      //     firebase={this.props.firebase\n      //     } />\n      // );\n      // console.log(checkinItems);\n      //combine checkinItems and thoughtItems then sort then render\n      //        <h1 className=\"date-marker\">February 17</h1>\n\n      return React.createElement(\"section\", {\n        className: \"feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(ThoughtProvoker, {\n        name: this.props.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }), React.createElement(ThoughtInput, {\n        PpfURL: this.props.PpfURL,\n        name: this.props.name,\n        uid: this.props.uid,\n        network: this.props.network,\n        firebase: this.props.firebase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), feedItems, React.createElement(ErrorMsg, {\n        src: graphics1,\n        header: \"Nothing more.\",\n        msg: \"Why not post a thought?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FeedTab;\n}(React.Component);\n\nexport default FeedTab;","map":{"version":3,"sources":["/Users/gollyzoom/Documents/GitHub/treehacks/src/components/FeedTab.js"],"names":["React","Component","$","autosize","CheckinPost","ThoughtPost","moment","ThoughtInput","ThoughtProvoker","graphics1","ErrorMsg","feedListen","initial","FeedTab","props","compare","a","b","timestamp","state","thoughts","checkins","feed","element","tempFeed","firebase","user","uid","collection","onSnapshot","snapshot","docChanges","forEach","change","type","data","doc","struct","checkin","name","PpfURL","format","postid","id","checkinData","console","log","thought","message","comments","comm_cont","conversation","push","sort","setState","local_feed","last_date","header","feedItems","map","f","index","split","toString","network"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './Feed/CheckinPost';\nimport ThoughtPost from './Feed/ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './Feed/ThoughtInput';\nimport ThoughtProvoker from './Feed/ThoughtProvoker';\n\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './Misc/ErrorMsg';\n\nlet feedListen;\nlet initial = true;\n\nclass FeedTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n      checkins: [],\n      feed: [],\n      //initial: true\n    }\n    //this.processTime = this.processTime.bind(this);\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n\n  - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n  compare = (a, b) => {\n    if (a.timestamp < b.timestamp)\n      return 1;\n    if (a.timestamp > b.timestamp)\n      return -1;\n    return 0;\n  }\n  \n\n  componentDidMount() {\n    //this.state.initial = true;\n    autosize($('textarea'));\n    let element = this;\n    let tempFeed = this.state.feed;\n    //let tempCheckins = this.state.checkins;\n    //let tempThoughts = this.state.thoughts;\n    feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\")\n      .onSnapshot((snapshot) => {\n        //let tempFeed = [];\n        //console.log(\"brad \" + this.state.initial);\n        //element = this;\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            //console.log(\"New city: \", change.doc.data());\n            //tempFeed.push(change.doc.id);\n            let data = change.doc.data();\n            let struct;\n            if (change.doc.data().checkin) {\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                timestamp: moment(data.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: data.checkinData\n              })\n            }\n            else {\n                console.log(\"new thought\");\n              struct = ({\n                uid: data.uid,\n                name: data.name,\n                PpfURL: data.PpfURL,\n                thought: data.thought,\n                message: data.message,\n                comments: data.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(data.timestamp).format('lll'),\n              })\n            }\n            tempFeed.push(struct);\n            // console.log(struct.timestamp);\n          }\n\n        });\n        /*console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));*/\n\n        console.log(\"NOthing but  \" + initial);\n        if(initial === true){\n            console.log(\"SORT\");\n            tempFeed.sort(this.compare)\n        }\n        initial = false;\n        //console.log(tempfeed);\n        element.setState({\n          /*checkins: tempCheckins,\n          thoughts: tempThoughts*/\n            \n          feed: tempFeed\n            \n        })\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n  }\n  componentWillUnmount() {\n    feedListen();\n  }\n\n\n\n\n  render() {\n\n    /*let local_feed = [];\n      console.log(\"this.state \" + this.state.initial);\n    if(this.state.initial){\n        console.log(\"SORT\");\n        this.setState({\n            feed:this.state.feed.sort(this.compare),\n            initial:false\n        },()=>{\n            local_feed = this.state.feed;\n        })\n        //local_feed.sort(this.compare);\n    }*/\n    let local_feed = this.state.feed;\n    //let local_feed = this.state.feed;\n    \n    //local_feed.sort(this.compare);\n    let last_date = \"\";\n    let header = <h1 className=\"date-marker\">February 17</h1>;\n    let feedItems = local_feed.map((f, index) => {\n      if (f.timestamp.split(\",\")[0] !== last_date) {\n        last_date = f.timestamp.split(\",\")[0];\n        // console.log(\"last date \" + last_date);\n        header = <h1 className=\"date-marker\">{last_date}</h1>;\n      }\n      else {\n        header = \"\";\n      }\n      if (f.checkinData) {\n        return <div>{header} <CheckinPost\n          uid={this.props.uid}\n          posterUid={f.uid}\n\n          PpfURL={f.PpfURL}\n          yourPpfURL={this.props.PpfURL}\n          key={index.toString() + \"_checkin\"}\n          name={f.name}\n          timestamp={f.timestamp}\n\n          postid={f.postid}\n          checkinData={f.checkinData}\n          firebase={this.props.firebase}\n        /></div>;\n      } else {\n        return <div>{header} <ThoughtPost\n          uid={this.props.uid}\n          posterUid={f.uid}\n\n          PpfURL={f.PpfURL}\n          yourPpfURL={this.props.PpfURL}\n\n          key={index.toString() + \"_thought\"}\n          name={f.name}\n          thought={f.thought}\n          timestamp={f.timestamp}\n\n          message={f.message}\n          postid={f.postid}\n          firebase={this.props.firebase\n          } /></div>;\n      }\n    }\n    );\n\n    // let feedItems = this.state.checkins.map((checkin, index) =>\n    //   <CheckinPost\n    //     uid={this.props.uid}\n    //     posterUid={checkin.uid}\n\n    //     PpfURL={checkin.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n    //     key={toString(index)}\n    //     name={checkin.name}\n    //     timestamp={checkin.timestamp}\n\n    //     postid={checkin.postid}\n    //     checkinData={checkin.checkinData}\n    //     firebase={this.props.firebase}\n    //   />\n    // );\n\n    // let thoughtItems = this.state.thoughts.map((thought, index) =>\n    //   <ThoughtPost\n    //     uid={this.props.uid}\n    //     posterUid={thought.uid}\n\n    //     PpfURL={thought.PpfURL}\n    //     yourPpfURL={this.props.PpfURL}\n\n    //     key={toString(index)}\n    //     name={thought.name}\n    //     thought={thought.thought}\n    //     timestamp={thought.timestamp}\n\n    //     message={thought.message}\n    //     postid={thought.postid}\n    //     firebase={this.props.firebase\n    //     } />\n    // );\n    // console.log(checkinItems);\n    //combine checkinItems and thoughtItems then sort then render\n    //        <h1 className=\"date-marker\">February 17</h1>\n    return (\n\n      <section className=\"feed\">\n\n        <ThoughtProvoker \n          name={this.props.name}\n        />\n\n        <ThoughtInput\n          PpfURL={this.props.PpfURL}\n          name={this.props.name}\n          uid={this.props.uid}\n          network={this.props.network}\n          firebase={this.props.firebase}\n        />\n\n        {feedItems}\n\n\n        <ErrorMsg\n          src={graphics1}\n          header='Nothing more.'\n          msg='Why not post a thought?'\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default FeedTab;\n"]},"metadata":{},"sourceType":"module"}